{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/c-pointer-cram-3/",
    "result": {"data":{"cur":{"id":"834712e6-3610-5a06-a14a-29dde5cb2c06","html":"<h2 id=\"️-배열과-포인터-️\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EB%B0%B0%EC%97%B4%EA%B3%BC-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EF%B8%8F\" aria-label=\"️ 배열과 포인터 ️ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⭐️ 배열과 포인터 ⭐️</h2>\n<p>개인적으로 여태 C언어를 공부하면서 가장 어려웠던 부분이지만, 타 언어에 비해 C언어 공부가 더욱 흥미로운 이유이기도 했던 <strong>배열과 포인터의 관계</strong>를 이야기해보자.</p>\n<p>먼저, 배열에 대한 기억을 되짚어 보자. 배열이란 간단히 다음과 같았다:</p>\n<ul>\n<li>변수가 여러개 모인 것</li>\n<li><strong>메모리 상에 연속되게 놓여 있는 원소(변수)들의 집합에 이름붙인 것</strong></li>\n</ul>\n<p>여기서 2차원, 3차원 등 고차원 배열도 만들 수 있었지만 결국 이것들도 메모리 상에서는 1차원 평면 위에 연속되게 놓여 있는 형태가 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* 배열의 존재 상태? */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr[%d] 의 주소값 : %p \\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>코드 출처: 모두의 코드 씹어먹는 C 언어(<a href=\"https://modoocode.com/24\">https://modoocode.com/24</a>)</li>\n</ul>\n<p>위 코드를 컴파일해보면, arr[0]부터 arr[9]까지 각 원소들의 주소값이 4씩 증가하며 연속적으로 위치하고 있음을 확인할 수 있다.</p>\n<p><strong>연속적</strong>이라고?</p>\n<p>바로 앞에서 우리는 포인터에 + 1을 해주면 (ex. <code class=\"language-text\">int* pa = &amp;a; int* pb = pa + 1</code>) 그 다음 값에 접근할 수 있음을 확인했다. 그 말인 즉슨, 배열의 첫 번째 원소의 주소값을 포인터에 넣어 준다면 그 포인터에 + 1, + 2를 해주는 것으로 그 다음 값, 다다음 값에 접근할 수 있다는 뜻이다!</p>\n<p>포인터는 자신이 가리키는 데이터의 ‘형’의 크기를 곱한 만큼 덧셈을 수행한다. 즉 <code class=\"language-text\">p</code> 라는 포인터가 <code class=\"language-text\">int a;</code> 를 가리킨다면 <code class=\"language-text\">p + 1</code> 을 할 때 <code class=\"language-text\">p</code> 의 주소값에 사실은 <code class=\"language-text\">1*4</code> 가 더해지고, <code class=\"language-text\">p + 3</code> 을 하면 p 의 주소값에 <code class=\"language-text\">3 * 4</code> 인 12 가 더해진다는 것이다.</p>\n<p>그러면 한번 배열의 원소를 가리키는 포인터를 만들어서 이를 확인해보자:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> parr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>arr\n<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr[%d]의 주소값: %p\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(parr + %d) 의 값 : %p \"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>parr <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>parr <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\" [일치하쥬?]\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\" [앗...불일치하쥬?]\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>코드 참고: 모두의 코드 씹어먹는 C 언어 (<a href=\"https://modoocode.com/24\">https://modoocode.com/24</a>)</li>\n</ul>\n<p>위 코드를 컴파일해보면 <code class=\"language-text\">&amp;arr[i]</code>, 즉 배열의 i번째 원소의 실제 주소값과 첫 번째 원소의 주소로부터 i만큼 떨어진 메모리의 주소<code class=\"language-text\">(parr + i)</code>가 일치한다는 것을 확인할 수 있다. <code class=\"language-text\">parr</code> 이 <code class=\"language-text\">int</code> 형이므로 <code class=\"language-text\">+ i</code> 를 하면 주소값에는 사실상 <code class=\"language-text\">4*i</code> 가 더해지게 되는 것이다.</p>\n<p>즉, 배열의 주소값을 저장하는 포인터를 만들고, 그 포인터에 연산자 <code class=\"language-text\">*</code>를 사용하여 그 주소에 해당하는 실제 값을 의미하도록 만드는 것은 배열의 특정 원소에 접근하는 것과 동일한 역할을 하게 된다.</p>\n<br/>\n<h3 id=\"1-배열의-이름\" style=\"position:relative;\"><a href=\"#1-%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%9D%B4%EB%A6%84\" aria-label=\"1 배열의 이름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 배열의 이름</h3>\n<p>앞서 배열의 주소값을 포인터에 전해주기 위해 아래와 같은 코드를 사용했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> parr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>arr</code></pre></div>\n<p>그랬더니 포인터 <code class=\"language-text\">parr</code>에 배열의 <strong>첫 번째 원소의 주소값</strong>이 전해졌다. (그래서 <code class=\"language-text\">parr + i</code>를 통해 이후 원소들에 순차적으로 접근했었다)</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr 의 정체 : %p \\n\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr[0] 의 주소값 : %p \\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 컴파일하면, 배열의 이름인 <code class=\"language-text\">arr</code>과 배열의 첫 번째 원소의 주소인 <code class=\"language-text\">&amp;arr[0]</code>이 동일한 값을 나타내고 있음을 알 수 있다.</p>\n<p>따라서 배열에서 배열의 이름은 배열의 첫 번째 원소의 주소값을 나타내고 있다는 사실을 알 수 있다. 그렇다면 배열의 이름이 배열의 첫 번째 원소를 가리키는 포인터라고 할 수 있을까?</p>\n<p><strong>그건 아니다.</strong></p>\n<br/>\n<h3 id=\"-배열은-배열이고-포인터는-포인터다\" style=\"position:relative;\"><a href=\"#-%EB%B0%B0%EC%97%B4%EC%9D%80-%EB%B0%B0%EC%97%B4%EC%9D%B4%EA%B3%A0-%ED%8F%AC%EC%9D%B8%ED%84%B0%EB%8A%94-%ED%8F%AC%EC%9D%B8%ED%84%B0%EB%8B%A4\" aria-label=\" 배열은 배열이고 포인터는 포인터다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 배열은 배열이고 포인터는 포인터다.</h3>\n<p>먼저 한 마디로 정리하자면, 배열 이름은 변경 불가능한 값이고 포인터는 변수로서 변경 가능한 값이다.</p>\n<p>개인적으로 헷갈렸던 부분이기 때문에 천천히 이해해보고자 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> parr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sizeof(arr) : %d \\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sizeof(parr) : %d \\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>parr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>먼저, 위 코드를 컴파일해보면 배열과 포인터는 본질적으로 ‘크기’면에서 애초에 다르다는 것을 알 수 있다. 배열인 <code class=\"language-text\">arr</code>는 12바이트(int 원소가 3개이므로 4*3) 즉 배열의 실제 크기가 나온다. 반면 포인터 <code class=\"language-text\">parr</code>는 (64비트 컴퓨터의 경우) 8바이트다.</p>\n<p>즉 배열의 이름(arr, 배열 그 자체)과, 첫 번째 원소의 주소값(parr, 배열의 시작 주소)은 엄밀히 다른 것이다.</p>\n<p>그렇다면 도대체 왜 두 값을 출력 했을 때 같은 값이 나올까?</p>\n<p>그 이유는 C 언어 상에서 배열의 이름이 <code class=\"language-text\">sizeof</code> 연산자나 주소값 연산자(<code class=\"language-text\">&amp;</code>)와 사용될 때를 빼면, 배열의 이름을 사용할 때 암묵적으로 <strong>첫 번째 원소를 가리키는 포인터</strong>로 <strong>타입 변환</strong>되기 때문이다.</p>\n<p>그러나, 이 때에 배열의 이름은 그 값을 바꿀 수 없는 <strong>상수 형태의 포인터</strong>이다. 따라서 <code class=\"language-text\">int arr[3]; arr++</code> 같이 배열 이름에 직접 증가나 감소 연산자를 사용할 수는 없다. 물론 <code class=\"language-text\">*(arr + i)</code>는 된다. 하지만 arr의 값 즉 원본을 수정할 수는 없다. 배열의 시작 위치가 만약 변경된다면 배열의 원소 전체가 흐트러지게 되므로 메모리의 이상한 공간에 잘못 접근하게 될 수도 있는 노릇이다.</p>\n<br/>\n<h3 id=\"️-code-classlanguage-textcode-연산자\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-code-classlanguage-textcode-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"️ code classlanguage textcode 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⭐️ <code class=\"language-text\">[]</code> 연산자</h3>\n<p>사실 포인터 연산자는 세 가지로, <code class=\"language-text\">*</code>과 <code class=\"language-text\">&amp;</code>, 마지막으로 <code class=\"language-text\">[]</code>도 있다. 앞서 보았듯 이 포인터 연산자들은 변수가 위치한 메모리의 주소를 구하거나(&#x26;), 포인터 변수가 갖는 주소에 저장된 앖을 구하는 데(*) 쓰인다.</p>\n<p>스택오버플로우를 살짝 찾아보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">e1<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span>   means   <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>e1<span class=\"token operator\">+</span>e2<span class=\"token punctuation\">)</span></code></pre></div>\n<p>라고 한다. 또한</p>\n<blockquote>\n<p>A postfix expression followed by an expression in square brackets <code class=\"language-text\">[]</code> is a subscripted designation of an element of an array object. The definition of the subscript operator <code class=\"language-text\">[]</code> is that <code class=\"language-text\">E1[E2]</code> is identical to <code class=\"language-text\">(*((E1)+(E2)))</code>. Because of the conversion rules that apply to the binary <code class=\"language-text\">+</code> operator, if <code class=\"language-text\">E1</code> is an array object (equivalently, a pointer to the initial element of an array object) and <code class=\"language-text\">E2</code> is an integer, <code class=\"language-text\">E1[E2]</code> designates the <code class=\"language-text\">E2</code>-th element of <code class=\"language-text\">E1</code> (counting from zero).</p>\n</blockquote>\n<p>라고도 한다. 즉, 후위 연산자<code class=\"language-text\">[]</code>는 배열 첨자 연산자로 배열의 특정한 원소를 나타내는 데 사용하는 기호가 맞는데, 그렇게 특정 원소를 나타낼 수 있는 원리가 마치 포인터와 같이 해당 원소에 접근하는 것이다.</p>\n<p>C 언어 상에서 <code class=\"language-text\">E1[E2]</code>는 <code class=\"language-text\">*((E1)+(E2))</code>와 같다. 이 때 이항 연산자 <code class=\"language-text\">+</code>의 타입 변환 규칙에 따라, <code class=\"language-text\">E1</code>이 배열이고 <code class=\"language-text\">E2</code>가 정수라면 <code class=\"language-text\">E1(E2)</code>는 <code class=\"language-text\">*((E1)+(E2))</code> 즉 <strong>배열 E1의 E2번째 요소</strong>의 <strong>주소</strong>에 저장되어 있는 <strong>실제 값</strong>을 가져오는 것이다.</p>\n<p>뭐… 그렇다. 그러니까 사실 <code class=\"language-text\">E1[E2]</code> 나 <code class=\"language-text\">E2[E1]</code>이나 괄호 안에서 <code class=\"language-text\">+</code>로 연결되면 순서가 상관없기 때문에 동일한 결과를 나타낸다. <code class=\"language-text\">arr[3]</code>이나 <code class=\"language-text\">3[arr]</code>이나 똑같다는 이야기다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%EB%B0%B0%EC%97%B4%EA%B3%BC-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EF%B8%8F\">⭐️ 배열과 포인터 ⭐️</a></p>\n<ul>\n<li><a href=\"#1-%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%9D%B4%EB%A6%84\">1. 배열의 이름</a></li>\n<li><a href=\"#-%EB%B0%B0%EC%97%B4%EC%9D%80-%EB%B0%B0%EC%97%B4%EC%9D%B4%EA%B3%A0-%ED%8F%AC%EC%9D%B8%ED%84%B0%EB%8A%94-%ED%8F%AC%EC%9D%B8%ED%84%B0%EB%8B%A4\">📌 배열은 배열이고 포인터는 포인터다.</a></li>\n<li><a href=\"#%EF%B8%8F--%EC%97%B0%EC%82%B0%EC%9E%90\">⭐️ <code class=\"language-text\">[]</code> 연산자</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"⭐️ 배열과 포인터 ⭐️ 개인적으로 여태 C언어를 공부하면서 가장 어려웠던 부분이지만, 타 언어에 비해 C언어 공부가 더욱 흥미로운 이유이기도 했던 배열과 포인터의 관계를 이야기해보자. 먼저, 배열에 대한 기억을 되짚어 보자. 배열이란 간단히 다음과 같았다: 변수가 여러개 모인 것 메모리 상에 연속되게 놓여 있는 원소(변수)들의 집합에 이름붙인 것 여기서 2차원, 3차원 등 고차원 배열도 만들 수 있었지만 결국 이것들도 메모리 상에서는 1차원 평면 위에 연속되게 놓여 있는 형태가 된다. 코드 출처: 모두의 코드 씹어먹는 C 언어(https://modoocode.com/24) 위 코드를 컴파일해보면, arr[0]부터 arr[9]까지 각 원소들의 주소값이 4씩 증가하며 연속적으로 위치하고 있음을 확인할 수 있다. 연속적이라고? 바로 앞에서 우리는 포인터에 + 1을 해주면 (ex. ) 그 다음 값에 접근할 수 있음을 확인했다. 그 말인 즉슨, 배열의 첫 번째 원소의 주소값을 포인터에 넣어 …","frontmatter":{"date":"April 05, 2022","title":"(C) 포인터 벼락치기 3. 포인터와 배열","categories":"C 42Seoul","author":"규자","emoji":"🌱"},"fields":{"slug":"/c-pointer-cram-3/"}},"next":{"id":"5eb13f75-7308-5000-a9e9-709c0754d441","html":"<h2 id=\"-포인터의-타입\" style=\"position:relative;\"><a href=\"#-%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%9D%98-%ED%83%80%EC%9E%85\" aria-label=\" 포인터의 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧬 포인터의 타입</h2>\n<p>앞에서 우리는 포인터가 <strong>메모리 상에서 특정 데이터가 위치해있는 주소</strong>를 담고 있다는 사실을 알아보았다. 이 메모리의 주소는 각 ‘방’들을 구분하기 위해 각각의 ‘방’에 부여되어 있다고 했다.</p>\n<p>그런데 이 ‘방’ 들은 일반적으로 각 1바이트이고, 각 자료형은 <code class=\"language-text\">char</code>를 제외하고 대부분 2바이트 이상이다. 대표적으로 int 자료형은 4바이트 아닌가. 그렇다는 건 4개의 ‘방’을 차지하고 있다는 건데, 그 중 포인터는 어느 방을 가리키고 있는 것이며, 어디까지 한 개의 데이터로 인식할 수 있는 것일까?</p>\n<p>여기서 포인터의 ‘타입’과 관련된 문제가 발생한다. 각 자료형이 차지할 수 있는 바이트의 크기를 명시하여 포인터에도 동일한 타입을 부여해주지 않으면, 메모리에서 얼마만큼을 읽어들여야 할 지 알 수 없게 된다.</p>\n<p>왜냐하면 포인터에게 전달되는 주소값은 해당 변수(데이터)가 메모리에서 차지하는 모든 주소들의 위치가 들어있는 것이 아니라 <strong>시작 주소</strong>만 들어가 있기 때문이다!</p>\n<br/>\n<h3 id=\"1-포인터와-변수\" style=\"position:relative;\"><a href=\"#1-%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%99%80-%EB%B3%80%EC%88%98\" aria-label=\"1 포인터와 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 포인터와 변수</h3>\n<p><strong>포인터도 변수이다</strong> 라는 사실을 잘 기억하자. 즉, 포인터에 들어간 주소값은 바뀔 수 있다. 하나의 포인터가 항상 같은 위치를 가리킬 필요는 없다는 뜻이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* 포인터도 변수이다 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\n  p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a : %d \\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b : %d \\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>코드 출처: 모두의 코드 씹어먹는 C 언어(<a href=\"https://modoocode.com/23\">https://modoocode.com/23</a>)</li>\n</ul>\n<br/>\n<h3 id=\"2-상수-포인터\" style=\"position:relative;\"><a href=\"#2-%EC%83%81%EC%88%98-%ED%8F%AC%EC%9D%B8%ED%84%B0\" aria-label=\"2 상수 포인터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 상수 포인터</h3>\n<p>바로 위의 내용과는 반대로, 한 번 가리킨 주소값을 절대 바꾸지 않는 포인터 즉 상수 포인터를 만들 수도 있다.</p>\n<br/>\n<h4 id=\"-상수\" style=\"position:relative;\"><a href=\"#-%EC%83%81%EC%88%98\" aria-label=\" 상수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 상수?</h4>\n<p>상수 포인터 이전에, 상수 즉 <code class=\"language-text\">const</code> 그 자체는 프로그래밍에서 아주 중요한 역할을 한다는 것부터 이해하면 좋을 것이다. 이는 프로그래밍 상에서 프로그래머들의 실수를 줄여주고, 실수가 발생했을 시 이를 잡아내는 데 아주 중요한 역할을 하게 된다. 왜냐하면 상수는 최초의 선언(초기화) 이후 그 어떤 경우에도 대입 연산자(<code class=\"language-text\">=</code>) 또는 포인터에 의한 값 변경 (<code class=\"language-text\">*{포인터}</code>) 이 불가능하기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>심지어는 이와 같은 대입조차 불가능하다. 그래서 중요한 값이며 <strong>절대로 바뀌지 않을 것 같은 값</strong>에는 무조건 <code class=\"language-text\">const</code> 키워드를 붙여주는 습관이 중요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* 상수 포인터? */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\n <span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 올바르지 않은 문장</span>\n pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 올바른 문장</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>코드 출처: 모두의 코드 씹어먹는 C 언어(<a href=\"https://modoocode.com/23\">https://modoocode.com/23</a>)</li>\n</ul>\n<p>위 코드에서 포인터 pa의 선언에 <code class=\"language-text\">const</code> 키워드를 더해 줌으로써 상수 포인터를 만든 <strong>것</strong>처럼 보인다. 그런데, 이 <code class=\"language-text\">const</code> 키워드는 아래와 같이 경우를 나누어 위치할 수 있다:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// const int 형 변수를 가리키는 포인터 pa</span>\n<span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span><span class=\"token operator\">*</span> pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// int 형 변수를 가리키는 const 포인터 pa</span></code></pre></div>\n<br/>\n<h4 id=\"-상수를-가리키는-포인터\" style=\"position:relative;\"><a href=\"#-%EC%83%81%EC%88%98%EB%A5%BC-%EA%B0%80%EB%A6%AC%ED%82%A4%EB%8A%94-%ED%8F%AC%EC%9D%B8%ED%84%B0\" aria-label=\" 상수를 가리키는 포인터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 상수를 가리키는 포인터</h4>\n<p>먼저 첫 번째 <code class=\"language-text\">const int* pa = &amp;a;</code>의 경우, 우리가 여기서 말하고 싶은 <strong>상수 포인터</strong>는 아니다. <strong>상수를 가리키는 포인터</strong>가 맞다. 즉, 포인터에 담기는 주소값이 변하면 안되는 것이 아니라, 포인터가 <strong>가리키는</strong> 변수가 값이 바뀔 수 없는 상수값인 경우다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* 상수 포인터? */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\n <span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 올바르지 않은 문장</span>\n pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 올바른 문장</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 중요한 것은 위의 이 코드에서 <code class=\"language-text\">int a</code>는 초기화 시 상수가 아니었다는 점이다. 변수 <code class=\"language-text\">a</code>의 자료형은 그저 <code class=\"language-text\">int</code>였지만 포인터 <code class=\"language-text\">pa</code>를 통해서 간접적으로 가리킬 때에는 컴퓨터 입장에서 <strong>’<code class=\"language-text\">const</code>인 변수를 가리키고 있구나’</strong> 라고 생각하게 되어 값을 바꿀 수 없게 된다. 그래서 <code class=\"language-text\">*pa = 3</code>과 같이 <code class=\"language-text\">pa</code>가 가리키는 변수(<code class=\"language-text\">a</code>)의 값은 바꿀 수 없지만, <code class=\"language-text\">pa = &amp;b</code>와 같이 <code class=\"language-text\">pa</code>에 담기는 값(주소값) 자체는 바꿀 수 있다.</p>\n<br/>\n<h4 id=\"-상수-포인터\" style=\"position:relative;\"><a href=\"#-%EC%83%81%EC%88%98-%ED%8F%AC%EC%9D%B8%ED%84%B0\" aria-label=\" 상수 포인터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 상수 포인터</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* 상수 포인터? */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\n  <span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 올바른 문장</span>\n  pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 올바르지 않은 문장</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그럼 동일한 원리로, 이처럼 <code class=\"language-text\">int const* pa = &amp;a;</code> 즉 <code class=\"language-text\">const</code>가 나중에 적힌 포인터의 경우 <strong><code class=\"language-text\">const*</code></strong> 가 핵심이 되어 <code class=\"language-text\">pa</code>에 담기는 값 자체가 변경될 수 없다는 의미임을 알 수 있다. 그래서 <code class=\"language-text\">pa = &amp;b;</code> 처럼 <code class=\"language-text\">pa</code>가 가리키는 대상을 변경할 수는 없지만, <code class=\"language-text\">*pa = 3;</code>와 같이 <code class=\"language-text\">pa</code>가 가리키는 대상의 ‘값’은 변경할 수 있게 된다.</p>\n<br/>\n<h3 id=\"3-포인터의-덧뺄셈\" style=\"position:relative;\"><a href=\"#3-%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%9D%98-%EB%8D%A7%EB%BA%84%EC%85%88\" aria-label=\"3 포인터의 덧뺄셈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 포인터의 덧뺄셈</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"포인터 pa의 값: %p\\n\"</span><span class=\"token punctuation\">,</span> pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(포인터 pa) + 1의 값: %p\\n\"</span><span class=\"token punctuation\">,</span> pa <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 컴파일해보면, 16진수이지만 어쨌든 pa와 pa + 1의 값은 <strong>4</strong>만큼 차이난다는 것을 확인할 수 있을 것이다.</p>\n<p><strong>1</strong>만큼 차이날 것이라고 예상했다면, 포인터가 가지는 값인 ‘주소’는 그냥 숫자의 나열이 아니라 해당 주소에 들어가 있는 ‘데이터’를 위한 값이라는 점을 상기하자.</p>\n<p><code class=\"language-text\">int</code> 자료형은 4바이트의 메모리 공간을 필요로 하므로, int형 변수 <code class=\"language-text\">a</code>의 주소를 가리키는 포인터 <code class=\"language-text\">pa</code>는 4바이트 중 첫 번째 바이트의 주소를 담고 있다. 예를 들어 이를 <code class=\"language-text\">0x12345678</code>이라고 하자. 이 때 변수 <code class=\"language-text\">a</code>는 이 주소부터 시작해서 총 4바이트만큼, 즉 <code class=\"language-text\">0x12345678</code> ~ <code class=\"language-text\">0x1234567B</code> 까지의 메모리 공간을 차지하고 있는 것이다. 그러므로 <code class=\"language-text\">pa + 1</code>은 <code class=\"language-text\">a</code>에게 할당된 <strong>4바이트만큼의 공간 다음</strong>으로 연속된 주소, 즉 <strong>원래 주소값 + 4</strong>만큼의 주소값을 반환한다.</p>\n<p><code class=\"language-text\">a</code>가 <code class=\"language-text\">char</code>였다면 1바이트 뒤, <code class=\"language-text\">double</code>이었다면 8바이트 뒤의 주소값을 반환했을 것이다.</p>\n<p>다만, <code class=\"language-text\">포인터 + 상수</code>가 아닌 <strong>포인터 간의 덧셈</strong>은 C에서 허용되지 않는다. 사실, 포인터끼리의 덧셈은 아무런 의미가 없을 뿐더러 필요 하지도 않다. 두 변수의 메모리 주소를 더해서 나오는 값은 이전에 포인터들이 가리키던 두 개의 변수와 아무런 관련이 없는 메모리 속의 임의의 지점일 뿐이다.</p>\n<p>그런데, <strong>포인터끼리의 뺄셈</strong>은 가능하다. 왜 그런지는 나중에 확인하자!</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%9D%98-%ED%83%80%EC%9E%85\">🧬 포인터의 타입</a></p>\n<ul>\n<li>\n<p><a href=\"#1-%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%99%80-%EB%B3%80%EC%88%98\">1. 포인터와 변수</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EC%83%81%EC%88%98-%ED%8F%AC%EC%9D%B8%ED%84%B0\">2. 상수 포인터</a></p>\n<ul>\n<li><a href=\"#-%EC%83%81%EC%88%98\">📌 상수?</a></li>\n<li><a href=\"#-%EC%83%81%EC%88%98%EB%A5%BC-%EA%B0%80%EB%A6%AC%ED%82%A4%EB%8A%94-%ED%8F%AC%EC%9D%B8%ED%84%B0\">📌 상수를 가리키는 포인터</a></li>\n<li><a href=\"#-%EC%83%81%EC%88%98-%ED%8F%AC%EC%9D%B8%ED%84%B0\">📌 상수 포인터</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%9D%98-%EB%8D%A7%EB%BA%84%EC%85%88\">3. 포인터의 덧뺄셈</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"April 04, 2022","title":"(C) 포인터 벼락치기 2. 포인터의 타입과 상수 포인터","categories":"C 42Seoul","author":"규자","emoji":"🌱"},"fields":{"slug":"/c-pointer-cram-2/"}},"prev":{"id":"82e36ea1-21ab-5a64-9cca-696a305ebfd2","html":"<h2 id=\"️-포인터-정리하기-️\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0-%EF%B8%8F\" aria-label=\"️ 포인터 정리하기 ️ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⭐️ 포인터 정리하기 ⭐️</h2>\n<p>이틀만에 꽤나 많은 내용을 머릿속에 집어넣었다. 인풋이 많으면 반드시 꼬이는 법이라, 잠깐 포인터의 핵심들을 직관적으로 짚어보고 넘어가려고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>parr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span></code></pre></div>\n<p>자, 코드를 보면서 천천히 되짚어보자.</p>\n<ol>\n<li>포인터는 특정 변수의 메모리 상 <strong>주소값</strong> 을 담고 있다.</li>\n<li>포인터는 변수다. 가리키는 주소는 변경될 수 있다.</li>\n<li>포인터는 가리킬 변수의 자료형 및 참조 연산자 <code class=\"language-text\">*</code>를 결합하여 만든다: <code class=\"language-text\">int *p;</code></li>\n<li><em>변수명을 떼어내면 변수의 형태를 알 수 있다.</em> <code class=\"language-text\">p</code>는 <code class=\"language-text\">int *</code>형 변수라고 생각하자.</li>\n<li>배열은 원소들의 집합이다. 이 원소들은 메모리 상에 <strong>연속적으로</strong> 위치한다.</li>\n<li><strong>배열 이름은 첫 번째 원소의 주소를 가리키는 포인터로 타입 변환된다.</strong> 단, <code class=\"language-text\">sizeof</code>나 <code class=\"language-text\">&amp;</code> 연산자가 쓰인 경우는 예외다.</li>\n<li><strong>이 때 배열 이름은 포인터 ‘상수’로 변환된다.</strong> 즉, <code class=\"language-text\">++</code>이나 <code class=\"language-text\">--</code>, <code class=\"language-text\">+=</code> 등으로 원본을 변경할 수 없다.</li>\n<li><code class=\"language-text\">arr[i]</code>와 같이, 배열 이름 뒤에 <code class=\"language-text\">[]</code> 연산자가 사용될 경우 컴파일러는 이를 <code class=\"language-text\">*(arr + i)</code>로 변환한다.\n<ul>\n<li>이 때 <code class=\"language-text\">+</code> 연산자의 변환 규칙에 따라 i는 사실 <code class=\"language-text\">(배열에 담긴 원소 타입의 크기 * i)</code>이다.</li>\n</ul>\n</li>\n</ol>\n<br/>\n<h2 id=\"-이중-포인터-포인터의-포인터\" style=\"position:relative;\"><a href=\"#-%EC%9D%B4%EC%A4%91-%ED%8F%AC%EC%9D%B8%ED%84%B0-%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%9D%98-%ED%8F%AC%EC%9D%B8%ED%84%B0\" aria-label=\" 이중 포인터 포인터의 포인터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🪄 이중 포인터, 포인터의 포인터</h2>\n<blockquote>\n<p>여기서부터는 <code class=\"language-text\">*</code>이 두 개씩 붙은 변수가 튀어나온다. 헷갈릴 수 있으므로 위의 4번, <em>변수명을 떼어내면 변수의 형태를 알 수 있다</em> 는 점을 기억하자.</p>\n</blockquote>\n<p>자 그럼, 이번에는 <strong>포인터를 가리키는 포인터</strong>에 대해 생각해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>ppa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pa<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"변수 a의 값은:  %d, 주소는 : %p\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"변수 pa의 값은 : %p, 주소는 : %p\\n\"</span><span class=\"token punctuation\">,</span> pa<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"변수 ppa의 값은 : %p, 주소는 : %p\\n\"</span><span class=\"token punctuation\">,</span> ppa<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ppa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"변수 a의 값은:  %d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"포인터 pa가 가리키는 주소의 실제 값은 : %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pa<span class=\"token punctuation\">)</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"포인터 ppa가 가리키는 주소의 실제 값은: %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ppa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이중 포인터 ppa가 가리키는 주소의 최종 값은: %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>ppa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 코드를 잘 생각해 보길 바란다. 먼저, 위의 세 <code class=\"language-text\">printf</code>문에서 변수 a의 주소를 포인터 pa가 담고 있고, 그 포인터 pa의 주소를 포인터 ppa가 담고 있음을 확인할 수 있을 것이다.</p>\n<p>당연하게도, 포인터도 변수이므로 메모리 어딘가에 주소를 부여받고 공간이 있어야 한다!</p>\n<p>다만 헷갈리는 건 아래 네 줄의 <code class=\"language-text\">printf</code>문이다. 그 전에, 이중 포인터의 형태를 다시 한 번만 생각해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>ppa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pa<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token operator\">*</span>ppa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pa<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 두 코드는 완전히 같은 코드다. 뭐 당연하다. 바보같을 수 있지만 나는 왜 <code class=\"language-text\">*</code> 연산자가 변수명 바로 앞에 나란히 붙어 있는지가 엄청나게 신경쓰여서 진도를 못 나갔다. 두 연산자가 나란히 붙어 있다고 다른 의미가 되는 게 아니라, <strong>변수명 바로 앞의 <code class=\"language-text\">*</code> 연산자</strong>는 해당 변수가 포인터임을 지정하는 역할을 하고, 그 앞의 나머지 <code class=\"language-text\">*</code>들은 몇 개가 되었든 해당 포인터가 가리킬 자료형을 뜻한다.</p>\n<p>즉, 포인터 <code class=\"language-text\">ppa</code>는 <code class=\"language-text\">int *</code> 자료형을 가리키는 포인터라는 뜻이다.</p>\n<p>이를 조금 더 잘 이해하기 위해서는 별 거 아니지만 <code class=\"language-text\">*</code>연산자가 <strong>오른쪽 우선</strong> 연산자라는 점을 기억하자. 이따 2차원 배열의 <code class=\"language-text\">[]</code> 연산자에서 헷갈릴 수 있어 미리 말하자면 <code class=\"language-text\">[]</code> 연산자는 <strong>왼쪽 우선</strong> 연산자다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"변수 a의 값은:  %d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"포인터 pa가 가리키는 주소의 실제 값은 : %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pa<span class=\"token punctuation\">)</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"포인터 ppa가 가리키는 주소의 실제 값은: %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ppa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이중 포인터 ppa가 가리키는 주소의 최종 값은: %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>ppa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그렇다면 다시 이 네 줄의 코드로 돌아오자. 우선 <code class=\"language-text\">pa</code>가 <code class=\"language-text\">a</code>를 가리키고 있으므로, <code class=\"language-text\">a</code>와 <code class=\"language-text\">*pa</code>는 같은 값이다.</p>\n<p>한편, 앞서 말했듯 <code class=\"language-text\">ppa</code>는 <code class=\"language-text\">int *</code>자료형, 즉 포인터 <code class=\"language-text\">pa</code>를 가리키므로 <code class=\"language-text\">*ppa</code>는 <code class=\"language-text\">pa</code>의 값인 <strong><code class=\"language-text\">a</code>의 주소</strong>다. 그렇기 때문에 <code class=\"language-text\">**ppa</code>는 <code class=\"language-text\">*(a의 주소)</code>, 즉 <code class=\"language-text\">*pa</code>가 되어 위와 같이 a의 값을 나타내게 된다.</p>\n<br/>\n<h2 id=\"-배열의-포인터\" style=\"position:relative;\"><a href=\"#-%EB%B0%B0%EC%97%B4%EC%9D%98-%ED%8F%AC%EC%9D%B8%ED%84%B0\" aria-label=\" 배열의 포인터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🏢 배열의 포인터</h2>\n<p>여길 생각해보기 전에 아래 코드의 다섯 변수의 자료형을 정확히 알고 있는지 생각해보자:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">char</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// char형, 1바이트</span>\n<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// int형, 4바이트</span>\n<span class=\"token keyword\">double</span> c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// double형, 8바이트</span>\n\n<span class=\"token keyword\">char</span> d<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// char [10]형, 10바이트</span>\n<span class=\"token keyword\">int</span> e<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// int [5][10]형, 200바이트</span></code></pre></div>\n<ul>\n<li>코드 출처: <a href=\"https://www.acmicpc.net/blog/view/32\">https://www.acmicpc.net/blog/view/32</a></li>\n</ul>\n<p>d, e를 보면, 뭔가 자료형이 이상하다. 그냥 char형, double형의 배열이 아닌 걸까?</p>\n<p><strong>아니다.</strong> 배열 또한 별개의 자료형이다. 그리고 배열의 크기가 다르면 다른 배열, 다른 자료형이다.</p>\n<p>예를 들어 char [10] 자료형과 char [11] 자료형은 엄연히 다른 자료형이다. 전자는 10바이트 크기의 자료형이고, 후자는 11바이트 크기의 자료형이다.</p>\n<p>물론 크기가 같아도 적힌 숫자가 다르면 다른 자료형이다. (ex, char [5][10], char [10][5])</p>\n<br/>\n<p>그럼 이제 배열의 포인터에 대한 이야기를 해보자.</p>\n<p>앞서 말했듯 배열도 별개의 자료형이기 때문에, 배열을 위한 포인터가 존재한다. 그 말인즉슨, <code class=\"language-text\">int a[10]</code> 이라는 변수를 보고 <strong>“int 자료형을 가리키는 포인터 <code class=\"language-text\">int *p</code>를 사용하면 되겠다!”</strong> 와는 다른 이야기를 지금부터 하겠다는 뜻이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// int 변수를 위한 포인터</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// int[10] 변수를 위한 포인터</span></code></pre></div>\n<p>여기서 a의 자료형은 <code class=\"language-text\">int</code>라고 생각하면 안된다! 이 때의 자료형은 <code class=\"language-text\">int[10]</code>이며, 크기는 <strong>40바이트</strong>다.</p>\n<p><strong>아니, 앞에서는 그렇게 안했잖아요? 🤔</strong></p>\n<br/>\n<h3 id=\"1-배열의-주소와-배열의-첫-번째-주소\" style=\"position:relative;\"><a href=\"#1-%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%A3%BC%EC%86%8C%EC%99%80-%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%B2%AB-%EB%B2%88%EC%A7%B8-%EC%A3%BC%EC%86%8C\" aria-label=\"1 배열의 주소와 배열의 첫 번째 주소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 배열의 주소와, 배열의 ‘첫 번째’ 주소</h3>\n<p>그렇다. 우리는 지금까지 아래와 같이 <code class=\"language-text\">int</code> 형 배열을 <code class=\"language-text\">int</code> 포인터로 잘 가리켜 왔다:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// int 자료형의 포인터 변수 p</span>\np<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a[3] = 3;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// int [10] 자료형의 포인터 변수 p. p의 자료형은 int (*)[10]</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a[3] = 3;</span></code></pre></div>\n<p>사실 포인터 <code class=\"language-text\">p</code>와 <code class=\"language-text\">pa</code> 둘 다 위의 코드를 보면 결과적으로 <code class=\"language-text\">a[3] = 3</code>과 같다는 점에서 거의 비슷하다고 볼 수 있다. 하지만 엄밀하게 말하면 <strong>포인터 <code class=\"language-text\">p</code>의 경우, 배열의 주소를 포인터 변수로 담은 것이 아니다. 오직 <code class=\"language-text\">a[0]</code>의 주소만 포인터로 담은 것이다.</strong></p>\n<p>우리는 앞에서 <code class=\"language-text\">[]</code> 연산자의 역할을 보았다. <code class=\"language-text\">arr[i]</code>는 컴파일러에 의해 <code class=\"language-text\">*(arr + i)</code>로 변환된다고 말이다. 마찬가지로, <code class=\"language-text\">a[0]</code>은 <code class=\"language-text\">*(a + 0)</code>으로 변환된다. 즉 포인터 자료형이다. 정리하자면\na라는 배열 자체는 <code class=\"language-text\">int [10]</code> 자료형이지만 a[0]은 <code class=\"language-text\">*(a + 0)</code>이고, 이는 <code class=\"language-text\">int *</code> 자료형이다.</p>\n<p>그럼 변수 <code class=\"language-text\">p</code>에는 오직 배열 <code class=\"language-text\">a</code>의 첫 번째 원소의 주소만 담긴 건데, 어떻게 <code class=\"language-text\">p[3]</code>과 같이 배열에 접근할 수 있는 걸까? 전혀 어렵게 생각할 것 없다. 바로 위에서 말했듯 <code class=\"language-text\">arr[i]</code>는 컴파일러에 의해 <code class=\"language-text\">*(arr + i)</code>로 변환된다. 따라서 <code class=\"language-text\">p[3]</code>은 <code class=\"language-text\">*(p + 3)</code>이고, 이를 풀어 적으면 <code class=\"language-text\">*(a[0] + 3)</code>이 된다. 다시 이것은 <code class=\"language-text\">*(*(a + 0) + 3)</code>이 된다.</p>\n<p>이 때 a라는 배열 자체는 <code class=\"language-text\">int [10]</code> 자료형이라고 해서 배열 이름 <code class=\"language-text\">a</code>가 <code class=\"language-text\">int [10]</code> 자료형이라고 헷갈려서는 안 된다. 우리는 앞에서 분명히 <strong>배열 이름은 배열의 첫 번째 원소의 주소를 가리키는 포인터 상수로 변환된다</strong>고 이야기했다. 그러니까 <code class=\"language-text\">int *p = a;</code>와 같이 <code class=\"language-text\">int *</code> 자료형의 포인터 p에 a를 대입할 수 있는 것이다. 이는 곧 <code class=\"language-text\">a[0]</code>의 주소를 대입한 것과 같으니까.</p>\n<br/>\n<h3 id=\"2-베열의-주소를-포인터에-넣자\" style=\"position:relative;\"><a href=\"#2-%EB%B2%A0%EC%97%B4%EC%9D%98-%EC%A3%BC%EC%86%8C%EB%A5%BC-%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%97%90-%EB%84%A3%EC%9E%90\" aria-label=\"2 베열의 주소를 포인터에 넣자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 베열의 ‘주소’를 포인터에 넣자!</h3>\n<p>자, 돌고돌아 이 이야기의 핵심은 결국 <code class=\"language-text\">&amp;a</code>를 포인터에 넣고자 할 때는 자료형을 다르게 생각해야 한다는 것이다.  배열 이름 <code class=\"language-text\">a</code>가 아니라, 배열 자체의 주소인 <code class=\"language-text\">&amp;a</code>가 바로 우리가 이야기해볼 대상이다.</p>\n<p>앞서 우리는 포인터 변수는 <strong>접근할 주소</strong>와, <strong>접근할 크기</strong>를 알아야 한다고 이야기했다.접근할 주소는 포인터 변수의 값이 되고, 접근할 크기는 사용하고자 하는 자료형의 크기가 된다. 예를 들어 <code class=\"language-text\">int</code>형 포인터라면 접근할 크기는 <code class=\"language-text\">int</code>형의 크기인 4바이트가 될 것이다.</p>\n<p>그러면, 내가 ‘배열의 <u>첫 번째 원소</u>의 주소’가 아니라, <strong>배열 그 자체</strong>의 주소를 포인터에 넣고 싶으면 자료형의 크기를 얼마로 지정해야 할까?</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// int [10] 자료형 변수 a. 크기는 40 바이트</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// int [10] 자료형의 포인터 변수 p. p의 자료형은 int (*)[10]</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> arrSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">int</span> ptrSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">int</span> wrngSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> arrSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 40</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> ptrSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 40</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> wrngSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8</span></code></pre></div>\n<ul>\n<li>코드 참고: <a href=\"https://www.acmicpc.net/blog/view/32\">https://www.acmicpc.net/blog/view/32</a></li>\n</ul>\n<p>위의 코드를 보자. <code class=\"language-text\">a</code>가 아닌 <code class=\"language-text\">&amp;a</code>를 담기 위해, <code class=\"language-text\">*p</code>가 아닌 <code class=\"language-text\">(*p)</code>가 쓰였다.</p>\n<p>앞서 말했듯 <strong>포인터 변수가 접근할 크기는 사용하고자 하는 자료형의 크기</strong>다. 배열 <code class=\"language-text\">a</code>자체는 40바이트(4 byte * 10)의 정보를 담을 수 있는 <code class=\"language-text\">int [10]</code> 형의 변수이므로, 배열 <code class=\"language-text\">a</code>의 주소를 담은 포인터 <code class=\"language-text\">p</code>가 접근할 크기 역시 40바이트여야 한다. 위의 코드에서 <code class=\"language-text\">sizeof</code>를 통해 확인해보니, 배열의 크기를 정확히 담고 있는 포인터는 <code class=\"language-text\">(*p)</code>, 즉 괄호로 감싸준 포인터임을 알 수 있다. 이처럼 <code class=\"language-text\">(*{변수명})</code> 형태로 사용되는 포인터는 <strong>배열 포인터</strong>라고 한다.</p>\n<p>그럼 다음 글에서 이 배열 포인터가 왜 필요한지 조금 더 자세히 이야기해보도록 하자.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0-%EF%B8%8F\">⭐️ 포인터 정리하기 ⭐️</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%9D%B4%EC%A4%91-%ED%8F%AC%EC%9D%B8%ED%84%B0-%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%9D%98-%ED%8F%AC%EC%9D%B8%ED%84%B0\">🪄 이중 포인터, 포인터의 포인터</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%B0%B0%EC%97%B4%EC%9D%98-%ED%8F%AC%EC%9D%B8%ED%84%B0\">🏢 배열의 포인터</a></p>\n<ul>\n<li><a href=\"#1-%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%A3%BC%EC%86%8C%EC%99%80-%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%B2%AB-%EB%B2%88%EC%A7%B8-%EC%A3%BC%EC%86%8C\">1. 배열의 주소와, 배열의 ‘첫 번째’ 주소</a></li>\n<li><a href=\"#2-%EB%B2%A0%EC%97%B4%EC%9D%98-%EC%A3%BC%EC%86%8C%EB%A5%BC-%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%97%90-%EB%84%A3%EC%9E%90\">2. 베열의 ‘주소’를 포인터에 넣자!</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"April 05, 2022","title":"(C) 포인터 벼락치기 4. 이중 포인터와 배열 포인터","categories":"C 42Seoul","author":"규자","emoji":"🌱"},"fields":{"slug":"/c-pointer-cram-4/"}},"site":{"siteMetadata":{"siteUrl":"https://gyutato.github.io","comments":{"utterances":{"repo":"gyutato/gyutato.github.io"}}}}},"pageContext":{"slug":"/c-pointer-cram-3/","nextSlug":"/c-pointer-cram-2/","prevSlug":"/c-pointer-cram-4/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}
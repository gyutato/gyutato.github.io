{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/c-pointer-cram-1/",
    "result": {"data":{"cur":{"id":"a2fcb012-9e17-5b8e-a2d1-bc3121be7652","html":"<h2 id=\"-타입-캐스팅-형-변환\" style=\"position:relative;\"><a href=\"#-%ED%83%80%EC%9E%85-%EC%BA%90%EC%8A%A4%ED%8C%85-%ED%98%95-%EB%B3%80%ED%99%98\" aria-label=\" 타입 캐스팅 형 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔄 타입 캐스팅 (형 변환)</h2>\n<p>가끔씩 프로그래밍을 하다 보면 형이 다른 변수 끼리 대입을 하는 연산을 필요로 한다. 예를 들어서 <code class=\"language-text\">double</code> 형 변수의 값을 <code class=\"language-text\">int</code> 형 변수에 대입하거나, <code class=\"language-text\">float</code> 형 변수에 <code class=\"language-text\">double</code> 형 변수의 값을 대입하는 경우다. 하지만 형이 다른 변수 끼리의 대입이나 연산은 컴파일이 불가능하거나, warning을 띄우게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">;</span>\n\n  b <span class=\"token operator\">=</span> <span class=\"token number\">2.4</span><span class=\"token punctuation\">;</span>\n  a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">int</code> 형 변수에 <code class=\"language-text\">double</code> 형 변수를 대입하면 소수 부분이 잘려서 정수 부분만 들어간다. 컴파일러는 이에 따른 데이터 손실에 대한 warning을 띄운다 (error가 아니기에 컴파일은 된다). 여기서는 컴파일러가 암묵적으로 형 변환을 해주었지만, 다른 사람에게 이 코드를 보여준다고 생각하면 명시적으로 형 변환을 밝혀 주는 것이 좋겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">;</span>\n\n  b <span class=\"token operator\">=</span> <span class=\"token number\">2.4</span><span class=\"token punctuation\">;</span>\n  a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">a</code>의 자료형은 <code class=\"language-text\">int</code>로 선언되어 있으므로 <code class=\"language-text\">b</code>의 앞에 <code class=\"language-text\">(int)</code>를 붙여 형 변환 시킨 값을 <code class=\"language-text\">a</code>에 넣어주겠다는 뜻이다. 형 변환 자체가 어려운 개념은 아니지만, 어쨌든 내가 선언한 변수가 컴파일 과정에서 다른 타입으로 변환되어 계산될 수 있다는 사실을 인지하는 것은 중요하다. 이후 포인터를 본격적으로 이야기하게 되면 ‘배열’과 ‘배열 이름’은 완전히 다르다는 사실을 계속 이야기할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 배열 <code class=\"language-text\">arr</code>의 타입은 <code class=\"language-text\">int[10]</code>이고, <code class=\"language-text\">sizeof</code>나 <code class=\"language-text\">&amp;</code>연산자를 사용한 연산을 제외하고는 변수명 <code class=\"language-text\">arr</code>를 사용할 때 <code class=\"language-text\">int *</code> 타입으로 형변환된다. 그래서 컴파일러 상에서는 포인터 연산으로 해석된다. 당최 무슨 소리인지! 차차 이해하게 될 것이다.</p>\n<br/>\n<h2 id=\"-포인터\" style=\"position:relative;\"><a href=\"#-%ED%8F%AC%EC%9D%B8%ED%84%B0\" aria-label=\" 포인터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🏹 포인터</h2>\n<p>공부하면 공부할수록, 생각하면 생각할수록 복잡하고 알쏭달쏭한 포인터 이야기에 접어들었다. 사실 그냥 그렇구나~ 하고 받아들이면 포인터를 공부하며 크게 헤멜 일은 없을지도 모른다. 하지만 나처럼 <em>어째서? 정확한 원리가 뭐지? 저렇게 연산되는 이유는 뭐지?</em> 와 같은 의문을 끊임없이 던진다면 포인터에 대해 최소 하루이틀은 온종일 붙잡고 있어야 할 수도 있다. 지금부터 이어지는 글은 온갖 포인터 관련 강의들, 정리들과 스택오버플로우를 떠돌며 나에게 필요한 포인터 관련 개념을 총정리한 내용이니, 개인적으로 일독을 정말 추천한다. 나름 자신있다!</p>\n<h3 id=\"1-포인터를-공부하기-전에\" style=\"position:relative;\"><a href=\"#1-%ED%8F%AC%EC%9D%B8%ED%84%B0%EB%A5%BC-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-%EC%A0%84%EC%97%90\" aria-label=\"1 포인터를 공부하기 전에 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 포인터를 공부하기 전에</h3>\n<p>몇 가지만 알아두자.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr 배열의 2 행 3 열의 수를 출력 : %d \\n\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/*  arr 배열의 2 행 3 열의 수를 출력 : 6 */</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>2 차원 배열이나 1 차원 배열 모두 메모리 상에서 연속적으로 쭈르륵 존재한다.</li>\n<li>메모리의 한 ‘방’의 크기는 보통 1바이트로 정의된다.</li>\n<li>컴퓨터는 이 각각의 ‘방’들을 구분하기 위해 고유의 주소를 붙인다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>위 코드는, 컴파일러를 거쳐 “메모리의 특정 방에서부터 4 바이트(방 4개)의 공간에 있는 데이터를 10 으로 바꾸어라!” 라는 명령으로 변환된다.</li>\n</ul>\n<br/>\n<h3 id=\"2-포인터도-변수다\" style=\"position:relative;\"><a href=\"#2-%ED%8F%AC%EC%9D%B8%ED%84%B0%EB%8F%84-%EB%B3%80%EC%88%98%EB%8B%A4\" aria-label=\"2 포인터도 변수다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 포인터도 변수다!</h3>\n<p>포인터는 우리가 앞에서 보았던 <code class=\"language-text\">int</code> 나 <code class=\"language-text\">char</code> 변수들과 다른 것이 전혀 아니다. 포인터도 ‘변수’이다. <code class=\"language-text\">int</code> 형 변수가 정수 데이터, <code class=\"language-text\">float</code> 형 변수가 실수 데이터를 보관했던 것 처럼, 포인터도 특정한 데이터를 보관하는 ‘변수’이다.</p>\n<p><strong>바로, 특정한 데이터가 저장된 <u>주소값</u>을 보관하는 변수이다!</strong></p>\n<blockquote>\n<p>✅ 포인터 : 메모리 상에 위치한 특정한 데이터의 (시작)주소값을 보관하는 변수!</p>\n</blockquote>\n<ul>\n<li><code class=\"language-text\">(포인터에 주소값이 저장되는 데이터의 형) *(포인터의 이름);</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* int 타입 데이터를 가리키는 포인터 변수 */</span></code></pre></div>\n<p>즉, 부연하자면 포인터 역시 형(type)을 가지며, 초기화 시 어떤 타입의 데이터를 가리킬 것인지 명시해주어야 한다.</p>\n<br/>\n<h3 id=\"3-code-classlanguage-textampcode-연산자\" style=\"position:relative;\"><a href=\"#3-code-classlanguage-textampcode-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"3 code classlanguage textampcode 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. <code class=\"language-text\">&amp;</code> 연산자</h3>\n<p>이 <strong>단항</strong> 연산자 <code class=\"language-text\">&amp;</code>는 비트 연산자 AND와 같은 기호를 사용하지만 다르게 해석된다.</p>\n<p>어떤 데이터(변수)의 앞에 사용하여 다음과 같이 사용한다:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* &amp; 연산자 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p \\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* 포인터의 시작 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n\n  p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"포인터 p 에 들어 있는 값 : %p \\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"int 변수 a 가 저장된 주소 : %p \\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* 포인터의 값과 변수의 주소가 모두 동일한 값으로 출력될 것이다 */</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>코드 출처: 모두의 코드 씹어먹는 C 언어(<a href=\"https://modoocode.com/23\">https://modoocode.com/23</a>)</li>\n</ul>\n<br/>\n<h3 id=\"4-code-classlanguage-textcode-연산자\" style=\"position:relative;\"><a href=\"#4-code-classlanguage-textcode-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"4 code classlanguage textcode 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. <code class=\"language-text\">*</code> 연산자</h3>\n<p>이렇게 <code class=\"language-text\">&amp;</code> 연산자를 사용하여 변수(데이터)가 저장되어 있는 <strong>메모리 주소</strong>를 꺼내올 수 있다면, 반대로 해당 주소의 메모리에 저장되어 있는 <strong>실제 값</strong>을 꺼내서 사용할 수도 있어야 하는 것이 당연하다.</p>\n<p><strong>“나(포인터)를 <u>나에게 저장된 주소값에 위치한 데이터</u>로 생각해줘!”</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n\n    p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a의 값: %d\"</span><span class=\"token punctuation\">.</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*p의 값: %d\"</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드를 보면, 포인터 변수 p가 변수 a의 <strong>메모리 주소</strong>를 담고 있다가, 앞에 <code class=\"language-text\">*</code>연산자를 붙임으로써 본인이 가리키고 있던 그 메모리 주소에 저장되어 있던 <strong>실제 값</strong>을 가져온 것이다.</p>\n<p><strong>즉, 변수 <code class=\"language-text\">a</code>와 <code class=\"language-text\">*p</code>는 정확히 동일하다.</strong></p>\n<p>반대로 생각하면, 포인터를 통해 특정 메모리 주소에 저장되어 있는 값을 그대로 가져올 뿐만 아니라, 해당 값에 접근해 <strong>직접 수정할 수도 있다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n\n    p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a의 값: %d\"</span><span class=\"token punctuation\">.</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*p의 값: %d\"</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<h3 id=\"-포인터를-왜-쓰는건데\" style=\"position:relative;\"><a href=\"#-%ED%8F%AC%EC%9D%B8%ED%84%B0%EB%A5%BC-%EC%99%9C-%EC%93%B0%EB%8A%94%EA%B1%B4%EB%8D%B0\" aria-label=\" 포인터를 왜 쓰는건데 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 포인터를 왜 쓰는건데</h3>\n<p>이렇듯 포인터는 <code class=\"language-text\">&amp;</code>연산자를 사용하여 어떤 값이 저장된 ‘메모리’ 주소로 접근할 수 있고, <code class=\"language-text\">*</code>연산자를 사용하여 그 값을 꺼내어 사용할 수도 있는 변수라는 아주 기본적인 개념을 알아보았다. C에서는 이 포인터가 대체 왜 이렇게 중요하게 다뤄질까? 그 이유는 C언어가 컴퓨터를 효율적으로 사용할 수 있도록 설계된 프로그래밍 언어이기 때문이다. 다른 예시로 <code class=\"language-text\">JavaScript</code>는 브라우저를 제어하기 위해 탄생한 언어다. 같은 맥락에서 C언어는 하드웨어를 제어하고 메모리를 조작하는 등 제한을 두지 않고 프로그래머에게 강력한 제어구조를 제공한다.</p>\n<p>포인터를 사용하면 메모리 주소를 참조하여 배열과 같은 연속된 데이터에 접근과 조작이 용이하다. 원소의 크기를 알면 메모리 주소를 통해 포인터 연산만으로 간편하게 접근할 수 있다. 이는 나아아아아중에 이야기할 ‘동적 할당된 메모리 영역(힙 영역)에 대한 접근 및 조작’에서 아주 중요한 역할을 한다. 또한 메모리에 직접 접근하므로 메모리 공간을 효율적으로 사용할 수 있다. <code class=\"language-text\">JavaScript</code>의 경우, 변수 값이 바뀌면 기존 값이 저장되어 있던 메모리 공간은 바로 비워지지 않고 컴파일러가 임의로 나중에 삭제한다. 값이 수시로 바뀌어야 하는 경우 컴파일러에 의한 임의의 딜레이가 쌓이면 비효율을 초래할 수 있을 것이다. 하지만 C는 포인터를 통해 메모리에 직접 접근할 수 있으므로 메모리 공간을 내가 필요한 만큼만 사용하거나 확보할 수 있다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%ED%83%80%EC%9E%85-%EC%BA%90%EC%8A%A4%ED%8C%85-%ED%98%95-%EB%B3%80%ED%99%98\">🔄 타입 캐스팅 (형 변환)</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%8F%AC%EC%9D%B8%ED%84%B0\">🏹 포인터</a></p>\n<ul>\n<li><a href=\"#1-%ED%8F%AC%EC%9D%B8%ED%84%B0%EB%A5%BC-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-%EC%A0%84%EC%97%90\">1. 포인터를 공부하기 전에</a></li>\n<li><a href=\"#2-%ED%8F%AC%EC%9D%B8%ED%84%B0%EB%8F%84-%EB%B3%80%EC%88%98%EB%8B%A4\">2. 포인터도 변수다!</a></li>\n<li><a href=\"#3--%EC%97%B0%EC%82%B0%EC%9E%90\">3. <code class=\"language-text\">&amp;</code> 연산자</a></li>\n<li><a href=\"#4--%EC%97%B0%EC%82%B0%EC%9E%90\">4. <code class=\"language-text\">*</code> 연산자</a></li>\n<li><a href=\"#-%ED%8F%AC%EC%9D%B8%ED%84%B0%EB%A5%BC-%EC%99%9C-%EC%93%B0%EB%8A%94%EA%B1%B4%EB%8D%B0\">🤔 포인터를 왜 쓰는건데</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"🔄 타입 캐스팅 (형 변환) 가끔씩 프로그래밍을 하다 보면 형이 다른 변수 끼리 대입을 하는 연산을 필요로 한다. 예를 들어서  형 변수의 값을  형 변수에 대입하거나,  형 변수에  형 변수의 값을 대입하는 경우다. 하지만 형이 다른 변수 끼리의 대입이나 연산은 컴파일이 불가능하거나, warning을 띄우게 된다.  형 변수에  형 변수를 대입하면 소수 부분이 잘려서 정수 부분만 들어간다. 컴파일러는 이에 따른 데이터 손실에 대한 warning을 띄운다 (error가 아니기에 컴파일은 된다). 여기서는 컴파일러가 암묵적으로 형 변환을 해주었지만, 다른 사람에게 이 코드를 보여준다고 생각하면 명시적으로 형 변환을 밝혀 주는 것이 좋겠다. 의 자료형은 로 선언되어 있으므로 의 앞에 를 붙여 형 변환 시킨 값을 에 넣어주겠다는 뜻이다. 형 변환 자체가 어려운 개념은 아니지만, 어쨌든 내가 선언한 변수가 컴파일 과정에서 다른 타입으로 변환되어 계산될 수 있다는 사실을 인지하는 것은 중요…","frontmatter":{"date":"April 04, 2022","title":"(C) 포인터 벼락치기 1. 형 변환과 포인터","categories":"C 42Seoul","author":"규자","emoji":"🌱"},"fields":{"slug":"/c-pointer-cram-1/"}},"next":{"id":"4b1e4671-5f1e-5914-935d-33cc5753999c","html":"<blockquote>\n<p>📌 <code class=\"language-text\">@for</code>, <code class=\"language-text\">@mixin</code>, <code class=\"language-text\">@function</code> 등 코드의 재활용성을 높이는 키워드를 통해 vanilla CSS보다 훨씬 간결한 스타일 코드를 작성해 보자.</p>\n</blockquote>\n<br/>\n<h2 id=\"-반복문\" style=\"position:relative;\"><a href=\"#-%EB%B0%98%EB%B3%B5%EB%AC%B8\" aria-label=\" 반복문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔁 반복문</h2>\n<h3 id=\"1-code-classlanguage-textforcode\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textforcode\" aria-label=\"1 code classlanguage textforcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">@for</code></h3>\n<p>반복문을 사용하면 <code class=\"language-text\">nth-child</code> 등 연속되는 여러 요소에 동일한 속성을 빠르게 적용할 수 있다.</p>\n<p><code class=\"language-text\">@for</code>, <code class=\"language-text\">from</code>, <code class=\"language-text\">through</code> 등의 키워드와 함께 사용하며, 보간법을 사용할 수 있어 유용하다.</p>\n<p>다만, 자바스크립트의 보간법은 <code class=\"language-text\">${ }</code>이었다면 SCSS에서는 <code class=\"language-text\">#{ }</code>으로 사용해야 한다. SCSS에서 <code class=\"language-text\">$</code>는 이미 변수를 만드는 용도로 사용되고 있기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token keyword\">@for</span> <span class=\"token variable\">$i</span> <span class=\"token keyword\">from</span> 1 <span class=\"token keyword\">through</span> <span class=\"token selector\">10 </span><span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 총 10번 반복. 제로베이스가 아니다! */</span>\n    .<span class=\"token property\">box</span><span class=\"token punctuation\">:</span><span class=\"token function\">nth-child</span><span class=\"token punctuation\">(</span><span class=\"token variable\">#{$i}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token comment\">/* 괄호 내부는 값을 적는 부분이 아니므로, # 을 통해 보간법을 사용한 것. */</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px <span class=\"token operator\">*</span> <span class=\"token variable\">$i</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* 연산자 뒤는 값을 적는 부분이 맞으므로 보간법을 사용하지 않아도 된다. */</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2-code-classlanguage-texteachcode\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-texteachcode\" aria-label=\"2 code classlanguage texteachcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <code class=\"language-text\">@each</code></h3>\n<p>SCSS는 JS의 배열과 유사한 <code class=\"language-text\">list</code>, 객체와 유사한 <code class=\"language-text\">map</code>이라는 데이터 종류를 지원한다. <code class=\"language-text\">list</code>의 경우 SCSS에서 취급할 수 있는 기본적인 데이터를 <strong>순서</strong>대로 명시한 데이터이며, <code class=\"language-text\">map</code>의 경우 key-value 형태로 데이터를 취급할 수 있으며 순서(인덱스)가 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$list</span></span><span class=\"token punctuation\">:</span> orange<span class=\"token punctuation\">,</span> royalblue<span class=\"token punctuation\">,</span> yellow<span class=\"token punctuation\">;</span>\n<span class=\"token property\"><span class=\"token variable\">$map</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token property\">o</span><span class=\"token punctuation\">:</span> orange<span class=\"token punctuation\">,</span>\n    <span class=\"token property\">r</span><span class=\"token punctuation\">:</span> royalblue<span class=\"token punctuation\">,</span>\n    <span class=\"token property\">y</span><span class=\"token punctuation\">:</span> yellow\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이러한 데이터들에 대해 <code class=\"language-text\">@each</code> 키워드를 사용하면, 그 요소들을 반복적으로 순회할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$list</span></span><span class=\"token punctuation\">:</span> orange<span class=\"token punctuation\">,</span> royalblue<span class=\"token punctuation\">,</span> yellow<span class=\"token punctuation\">;</span>\n<span class=\"token property\"><span class=\"token variable\">$map</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token property\">o</span><span class=\"token punctuation\">:</span> orange<span class=\"token punctuation\">,</span>\n    <span class=\"token property\">r</span><span class=\"token punctuation\">:</span> royalblue<span class=\"token punctuation\">,</span>\n    <span class=\"token property\">y</span><span class=\"token punctuation\">:</span> yellow\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">@each</span> <span class=\"token selector\"><span class=\"token variable\">$k</span>, <span class=\"token variable\">$v</span> in <span class=\"token variable\">$map</span> </span><span class=\"token punctuation\">{</span>\n    <span class=\"token selector\">.box-<span class=\"token variable\">#{$k}</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$v</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* CSS 변환 */</span>\n<span class=\"token selector\">.box-o </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> orange<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.box-r </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> royalblue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.box-y </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<h2 id=\"-함수\" style=\"position:relative;\"><a href=\"#-%ED%95%A8%EC%88%98\" aria-label=\" 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛠 함수</h2>\n<h3 id=\"1-code-classlanguage-textfunctioncode\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textfunctioncode\" aria-label=\"1 code classlanguage textfunctioncode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">@function</code></h3>\n<p>여타 언어의 함수와 다를 것 없이, 파라미터를 받아 결과값을 연산해낸 후 이를 반환한다. 속성의 값으로 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token keyword\">@function</span> <span class=\"token function\">ratio</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$size</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ratio</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">@return</span> <span class=\"token variable\">$size</span> <span class=\"token operator\">*</span> <span class=\"token variable\">$ratio</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.box </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\"><span class=\"token variable\">$width</span></span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$width</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token function\">radio</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$width</span><span class=\"token punctuation\">,</span> 1/2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2-색상-관련-내장-함수-\" style=\"position:relative;\"><a href=\"#2-%EC%83%89%EC%83%81-%EA%B4%80%EB%A0%A8-%EB%82%B4%EC%9E%A5-%ED%95%A8%EC%88%98-\" aria-label=\"2 색상 관련 내장 함수  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 색상 관련 내장 함수 🎨</h3>\n<h4 id=\"1-code-classlanguage-textmixcode\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textmixcode\" aria-label=\"1 code classlanguage textmixcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) <code class=\"language-text\">mix</code></h4>\n<p>주어지는 두 인수의 색상을 섞어서 새로운 색상을 내어 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$color</span></span><span class=\"token punctuation\">:</span> royalblue<span class=\"token punctuation\">;</span>\n<span class=\"token selector\">.box </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">mix</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">,</span> red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">/* 보라색 계열의 색상이 적용될 것이다. */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"2-code-classlanguage-textlightencode-code-classlanguage-textdarkencode\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-textlightencode-code-classlanguage-textdarkencode\" aria-label=\"2 code classlanguage textlightencode code classlanguage textdarkencode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) <code class=\"language-text\">lighten</code>, <code class=\"language-text\">darken</code></h4>\n<p>원본 색상의 밝기를 밝거나 어둡게 조절할 때 사용할 수 있다. 주로 버튼에 커서를 올렸을 때와 같은 상황에서 유용하게 쓰일 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$color</span></span><span class=\"token punctuation\">:</span> royalblue<span class=\"token punctuation\">;</span>\n<span class=\"token selector\">.btn </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">lighten</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">,</span> 10%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">/* 원본 색상보다 10% 밝은 색상을 적용 */</span>\n    <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">darken</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">,</span> 10%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">/* 원본 색상보다 10% 어두운 색상을 적용 */</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"3-code-classlanguage-textsaturatecode-code-classlanguage-textdesaturatecode-code-classlanguage-textgrayscalecode\" style=\"position:relative;\"><a href=\"#3-code-classlanguage-textsaturatecode-code-classlanguage-textdesaturatecode-code-classlanguage-textgrayscalecode\" aria-label=\"3 code classlanguage textsaturatecode code classlanguage textdesaturatecode code classlanguage textgrayscalecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) <code class=\"language-text\">saturate</code>, <code class=\"language-text\">desaturate</code>, <code class=\"language-text\">grayscale</code></h4>\n<p>원본 색상의 채도를 올리거나 내릴 때 사용할 수 있다. <code class=\"language-text\">grayscale</code>의 경우에는 흑백으로 만들 하나의 색상 인자만 필요하며, %와 같은 수치는 필요하지 않다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$color</span></span><span class=\"token punctuation\">:</span> royalblue<span class=\"token punctuation\">;</span>\n<span class=\"token selector\">.btn </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">saturate</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">,</span> 40%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">/* 원본 색상보다 채도가 40% 올라간 색상을 적용 */</span>\n    <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">desaturate</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">,</span> 40%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">/* 원본 색상보다 채도가 40% 내려간 색상을 적용 */</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:focus </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">grayscale</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">/* 해당 색상이 흑백으로 보여짐 */</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"3-code-classlanguage-textinvertcode\" style=\"position:relative;\"><a href=\"#3-code-classlanguage-textinvertcode\" aria-label=\"3 code classlanguage textinvertcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) <code class=\"language-text\">invert</code></h4>\n<p>색상을 반전시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$color</span></span><span class=\"token punctuation\">:</span> royalblue<span class=\"token punctuation\">;</span>\n<span class=\"token selector\">.btn </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">invert</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* 파란색에서 반전되어 노란색 계열의 색이 적용된다. */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"4-code-classlanguage-textrgbacode\" style=\"position:relative;\"><a href=\"#4-code-classlanguage-textrgbacode\" aria-label=\"4 code classlanguage textrgbacode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4) <code class=\"language-text\">rgba</code></h4>\n<p>색상의 투명도를 조절할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$color</span></span><span class=\"token punctuation\">:</span> royalblue<span class=\"token punctuation\">;</span>\n<span class=\"token selector\">.btn </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">,</span> .5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* 해당 색상이 반투명하게 적용된다. */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>표준의 CSS에서도 rgba 함수를 사용할 수 있었는데, 이때 (0,0,0,.5)와 같은 식으로 4개의 인수를 사용하여 색상을 직접 명시해야 했다. 하지만 SCSS에서는 변수를 사용하여 오직 2개의 인수만으로 보다 편리하게 사용할 수 있다.</p>\n<br/>\n<h2 id=\"-재활용\" style=\"position:relative;\"><a href=\"#-%EC%9E%AC%ED%99%9C%EC%9A%A9\" aria-label=\" 재활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔄 재활용</h2>\n<h3 id=\"1-code-classlanguage-textmixincode\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textmixincode\" aria-label=\"1 code classlanguage textmixincode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">@mixin</code></h3>\n<p>우리가 알고 있는 <strong>CSS 코드의 모음</strong>이다. 즉 CSS 속성과 값을 쭉 나열한 후 하나의 코드블록으로 묶어 여러 곳에 손쉽게 적용하고 재활용하는 것. 디자인에서의 preset과 유사하다.</p>\n<p>한편, 위에서 본 <code class=\"language-text\">@function</code> 등의 함수는 실제로 어떤 값을 <strong>연산</strong>하여 <strong>반환된 결과</strong>를 사용하기 위해 만들어낸 개념이라고 생각할 수 있다.</p>\n<p>즉, @mixin은 일반적으로 <strong>CSS 스타일</strong>을 다루는 용도, @function은 일반적인 <strong>값</strong>을 어떻게 처리할지에 대한 내용을 다루는 용도로 사용한다.</p>\n<h3 id=\"2-code-classlanguage-textcontentcode\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-textcontentcode\" aria-label=\"2 code classlanguage textcontentcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <code class=\"language-text\">@content</code></h3>\n<p><code class=\"language-text\">@mixin</code> 내부에서 <code class=\"language-text\">@content</code>를 선언하면, 이후 해당 믹스인을 <code class=\"language-text\">@include</code>하여 사용할 때 중괄호를 열어 해당 믹스인 내부의 <code class=\"language-text\">@content</code> 위치에 추가로 속성을 더할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token keyword\">@mixin</span> <span class=\"token selector\">left-top </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">@content</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.box </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">@include</span> <span class=\"token selector\">left-top </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* 이상 세 가지의 속성이 추가로 믹스인의 @content 위치에 더해져 CSS로 변환된다 */</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"date":"January 04, 2022","title":"(SCSS) 반복문, 함수 그리고 재활용","categories":"frontend","author":"규자","emoji":"🌱"},"fields":{"slug":"/SCSS-grammar/"}},"prev":{"id":"5eb13f75-7308-5000-a9e9-709c0754d441","html":"<h2 id=\"-포인터의-타입\" style=\"position:relative;\"><a href=\"#-%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%9D%98-%ED%83%80%EC%9E%85\" aria-label=\" 포인터의 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧬 포인터의 타입</h2>\n<p>앞에서 우리는 포인터가 <strong>메모리 상에서 특정 데이터가 위치해있는 주소</strong>를 담고 있다는 사실을 알아보았다. 이 메모리의 주소는 각 ‘방’들을 구분하기 위해 각각의 ‘방’에 부여되어 있다고 했다.</p>\n<p>그런데 이 ‘방’ 들은 일반적으로 각 1바이트이고, 각 자료형은 <code class=\"language-text\">char</code>를 제외하고 대부분 2바이트 이상이다. 대표적으로 int 자료형은 4바이트 아닌가. 그렇다는 건 4개의 ‘방’을 차지하고 있다는 건데, 그 중 포인터는 어느 방을 가리키고 있는 것이며, 어디까지 한 개의 데이터로 인식할 수 있는 것일까?</p>\n<p>여기서 포인터의 ‘타입’과 관련된 문제가 발생한다. 각 자료형이 차지할 수 있는 바이트의 크기를 명시하여 포인터에도 동일한 타입을 부여해주지 않으면, 메모리에서 얼마만큼을 읽어들여야 할 지 알 수 없게 된다.</p>\n<p>왜냐하면 포인터에게 전달되는 주소값은 해당 변수(데이터)가 메모리에서 차지하는 모든 주소들의 위치가 들어있는 것이 아니라 <strong>시작 주소</strong>만 들어가 있기 때문이다!</p>\n<br/>\n<h3 id=\"1-포인터와-변수\" style=\"position:relative;\"><a href=\"#1-%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%99%80-%EB%B3%80%EC%88%98\" aria-label=\"1 포인터와 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 포인터와 변수</h3>\n<p><strong>포인터도 변수이다</strong> 라는 사실을 잘 기억하자. 즉, 포인터에 들어간 주소값은 바뀔 수 있다. 하나의 포인터가 항상 같은 위치를 가리킬 필요는 없다는 뜻이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* 포인터도 변수이다 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\n  p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a : %d \\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b : %d \\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>코드 출처: 모두의 코드 씹어먹는 C 언어(<a href=\"https://modoocode.com/23\">https://modoocode.com/23</a>)</li>\n</ul>\n<br/>\n<h3 id=\"2-상수-포인터\" style=\"position:relative;\"><a href=\"#2-%EC%83%81%EC%88%98-%ED%8F%AC%EC%9D%B8%ED%84%B0\" aria-label=\"2 상수 포인터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 상수 포인터</h3>\n<p>바로 위의 내용과는 반대로, 한 번 가리킨 주소값을 절대 바꾸지 않는 포인터 즉 상수 포인터를 만들 수도 있다.</p>\n<br/>\n<h4 id=\"-상수\" style=\"position:relative;\"><a href=\"#-%EC%83%81%EC%88%98\" aria-label=\" 상수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 상수?</h4>\n<p>상수 포인터 이전에, 상수 즉 <code class=\"language-text\">const</code> 그 자체는 프로그래밍에서 아주 중요한 역할을 한다는 것부터 이해하면 좋을 것이다. 이는 프로그래밍 상에서 프로그래머들의 실수를 줄여주고, 실수가 발생했을 시 이를 잡아내는 데 아주 중요한 역할을 하게 된다. 왜냐하면 상수는 최초의 선언(초기화) 이후 그 어떤 경우에도 대입 연산자(<code class=\"language-text\">=</code>) 또는 포인터에 의한 값 변경 (<code class=\"language-text\">*{포인터}</code>) 이 불가능하기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>심지어는 이와 같은 대입조차 불가능하다. 그래서 중요한 값이며 <strong>절대로 바뀌지 않을 것 같은 값</strong>에는 무조건 <code class=\"language-text\">const</code> 키워드를 붙여주는 습관이 중요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* 상수 포인터? */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\n <span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 올바르지 않은 문장</span>\n pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 올바른 문장</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>코드 출처: 모두의 코드 씹어먹는 C 언어(<a href=\"https://modoocode.com/23\">https://modoocode.com/23</a>)</li>\n</ul>\n<p>위 코드에서 포인터 pa의 선언에 <code class=\"language-text\">const</code> 키워드를 더해 줌으로써 상수 포인터를 만든 <strong>것</strong>처럼 보인다. 그런데, 이 <code class=\"language-text\">const</code> 키워드는 아래와 같이 경우를 나누어 위치할 수 있다:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// const int 형 변수를 가리키는 포인터 pa</span>\n<span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span><span class=\"token operator\">*</span> pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// int 형 변수를 가리키는 const 포인터 pa</span></code></pre></div>\n<br/>\n<h4 id=\"-상수를-가리키는-포인터\" style=\"position:relative;\"><a href=\"#-%EC%83%81%EC%88%98%EB%A5%BC-%EA%B0%80%EB%A6%AC%ED%82%A4%EB%8A%94-%ED%8F%AC%EC%9D%B8%ED%84%B0\" aria-label=\" 상수를 가리키는 포인터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 상수를 가리키는 포인터</h4>\n<p>먼저 첫 번째 <code class=\"language-text\">const int* pa = &amp;a;</code>의 경우, 우리가 여기서 말하고 싶은 <strong>상수 포인터</strong>는 아니다. <strong>상수를 가리키는 포인터</strong>가 맞다. 즉, 포인터에 담기는 주소값이 변하면 안되는 것이 아니라, 포인터가 <strong>가리키는</strong> 변수가 값이 바뀔 수 없는 상수값인 경우다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* 상수 포인터? */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\n <span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 올바르지 않은 문장</span>\n pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 올바른 문장</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 중요한 것은 위의 이 코드에서 <code class=\"language-text\">int a</code>는 초기화 시 상수가 아니었다는 점이다. 변수 <code class=\"language-text\">a</code>의 자료형은 그저 <code class=\"language-text\">int</code>였지만 포인터 <code class=\"language-text\">pa</code>를 통해서 간접적으로 가리킬 때에는 컴퓨터 입장에서 <strong>’<code class=\"language-text\">const</code>인 변수를 가리키고 있구나’</strong> 라고 생각하게 되어 값을 바꿀 수 없게 된다. 그래서 <code class=\"language-text\">*pa = 3</code>과 같이 <code class=\"language-text\">pa</code>가 가리키는 변수(<code class=\"language-text\">a</code>)의 값은 바꿀 수 없지만, <code class=\"language-text\">pa = &amp;b</code>와 같이 <code class=\"language-text\">pa</code>에 담기는 값(주소값) 자체는 바꿀 수 있다.</p>\n<br/>\n<h4 id=\"-상수-포인터\" style=\"position:relative;\"><a href=\"#-%EC%83%81%EC%88%98-%ED%8F%AC%EC%9D%B8%ED%84%B0\" aria-label=\" 상수 포인터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 상수 포인터</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* 상수 포인터? */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\n  <span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 올바른 문장</span>\n  pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 올바르지 않은 문장</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그럼 동일한 원리로, 이처럼 <code class=\"language-text\">int const* pa = &amp;a;</code> 즉 <code class=\"language-text\">const</code>가 나중에 적힌 포인터의 경우 <strong><code class=\"language-text\">const*</code></strong> 가 핵심이 되어 <code class=\"language-text\">pa</code>에 담기는 값 자체가 변경될 수 없다는 의미임을 알 수 있다. 그래서 <code class=\"language-text\">pa = &amp;b;</code> 처럼 <code class=\"language-text\">pa</code>가 가리키는 대상을 변경할 수는 없지만, <code class=\"language-text\">*pa = 3;</code>와 같이 <code class=\"language-text\">pa</code>가 가리키는 대상의 ‘값’은 변경할 수 있게 된다.</p>\n<br/>\n<h3 id=\"3-포인터의-덧뺄셈\" style=\"position:relative;\"><a href=\"#3-%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%9D%98-%EB%8D%A7%EB%BA%84%EC%85%88\" aria-label=\"3 포인터의 덧뺄셈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 포인터의 덧뺄셈</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"포인터 pa의 값: %p\\n\"</span><span class=\"token punctuation\">,</span> pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(포인터 pa) + 1의 값: %p\\n\"</span><span class=\"token punctuation\">,</span> pa <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 컴파일해보면, 16진수이지만 어쨌든 pa와 pa + 1의 값은 <strong>4</strong>만큼 차이난다는 것을 확인할 수 있을 것이다.</p>\n<p><strong>1</strong>만큼 차이날 것이라고 예상했다면, 포인터가 가지는 값인 ‘주소’는 그냥 숫자의 나열이 아니라 해당 주소에 들어가 있는 ‘데이터’를 위한 값이라는 점을 상기하자.</p>\n<p><code class=\"language-text\">int</code> 자료형은 4바이트의 메모리 공간을 필요로 하므로, int형 변수 <code class=\"language-text\">a</code>의 주소를 가리키는 포인터 <code class=\"language-text\">pa</code>는 4바이트 중 첫 번째 바이트의 주소를 담고 있다. 예를 들어 이를 <code class=\"language-text\">0x12345678</code>이라고 하자. 이 때 변수 <code class=\"language-text\">a</code>는 이 주소부터 시작해서 총 4바이트만큼, 즉 <code class=\"language-text\">0x12345678</code> ~ <code class=\"language-text\">0x1234567B</code> 까지의 메모리 공간을 차지하고 있는 것이다. 그러므로 <code class=\"language-text\">pa + 1</code>은 <code class=\"language-text\">a</code>에게 할당된 <strong>4바이트만큼의 공간 다음</strong>으로 연속된 주소, 즉 <strong>원래 주소값 + 4</strong>만큼의 주소값을 반환한다.</p>\n<p><code class=\"language-text\">a</code>가 <code class=\"language-text\">char</code>였다면 1바이트 뒤, <code class=\"language-text\">double</code>이었다면 8바이트 뒤의 주소값을 반환했을 것이다.</p>\n<p>다만, <code class=\"language-text\">포인터 + 상수</code>가 아닌 <strong>포인터 간의 덧셈</strong>은 C에서 허용되지 않는다. 사실, 포인터끼리의 덧셈은 아무런 의미가 없을 뿐더러 필요 하지도 않다. 두 변수의 메모리 주소를 더해서 나오는 값은 이전에 포인터들이 가리키던 두 개의 변수와 아무런 관련이 없는 메모리 속의 임의의 지점일 뿐이다.</p>\n<p>그런데, <strong>포인터끼리의 뺄셈</strong>은 가능하다. 왜 그런지는 나중에 확인하자!</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%9D%98-%ED%83%80%EC%9E%85\">🧬 포인터의 타입</a></p>\n<ul>\n<li>\n<p><a href=\"#1-%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%99%80-%EB%B3%80%EC%88%98\">1. 포인터와 변수</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EC%83%81%EC%88%98-%ED%8F%AC%EC%9D%B8%ED%84%B0\">2. 상수 포인터</a></p>\n<ul>\n<li><a href=\"#-%EC%83%81%EC%88%98\">📌 상수?</a></li>\n<li><a href=\"#-%EC%83%81%EC%88%98%EB%A5%BC-%EA%B0%80%EB%A6%AC%ED%82%A4%EB%8A%94-%ED%8F%AC%EC%9D%B8%ED%84%B0\">📌 상수를 가리키는 포인터</a></li>\n<li><a href=\"#-%EC%83%81%EC%88%98-%ED%8F%AC%EC%9D%B8%ED%84%B0\">📌 상수 포인터</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%9D%98-%EB%8D%A7%EB%BA%84%EC%85%88\">3. 포인터의 덧뺄셈</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"April 04, 2022","title":"(C) 포인터 벼락치기 2. 포인터의 타입과 상수 포인터","categories":"C 42Seoul","author":"규자","emoji":"🌱"},"fields":{"slug":"/c-pointer-cram-2/"}},"site":{"siteMetadata":{"siteUrl":"https://gyutato.github.io","comments":{"utterances":{"repo":"gyutato/gyutato.github.io"}}}}},"pageContext":{"slug":"/c-pointer-cram-1/","nextSlug":"/SCSS-grammar/","prevSlug":"/c-pointer-cram-2/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}
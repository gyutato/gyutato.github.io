{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/SCSS-grammar/",
    "result": {"data":{"cur":{"id":"4b1e4671-5f1e-5914-935d-33cc5753999c","html":"<blockquote>\n<p>📌 <code class=\"language-text\">@for</code>, <code class=\"language-text\">@mixin</code>, <code class=\"language-text\">@function</code> 등 코드의 재활용성을 높이는 키워드를 통해 vanilla CSS보다 훨씬 간결한 스타일 코드를 작성해 보자.</p>\n</blockquote>\n<br/>\n<h2 id=\"-반복문\" style=\"position:relative;\"><a href=\"#-%EB%B0%98%EB%B3%B5%EB%AC%B8\" aria-label=\" 반복문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔁 반복문</h2>\n<h3 id=\"1-code-classlanguage-textforcode\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textforcode\" aria-label=\"1 code classlanguage textforcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">@for</code></h3>\n<p>반복문을 사용하면 <code class=\"language-text\">nth-child</code> 등 연속되는 여러 요소에 동일한 속성을 빠르게 적용할 수 있다.</p>\n<p><code class=\"language-text\">@for</code>, <code class=\"language-text\">from</code>, <code class=\"language-text\">through</code> 등의 키워드와 함께 사용하며, 보간법을 사용할 수 있어 유용하다.</p>\n<p>다만, 자바스크립트의 보간법은 <code class=\"language-text\">${ }</code>이었다면 SCSS에서는 <code class=\"language-text\">#{ }</code>으로 사용해야 한다. SCSS에서 <code class=\"language-text\">$</code>는 이미 변수를 만드는 용도로 사용되고 있기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token keyword\">@for</span> <span class=\"token variable\">$i</span> <span class=\"token keyword\">from</span> 1 <span class=\"token keyword\">through</span> <span class=\"token selector\">10 </span><span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 총 10번 반복. 제로베이스가 아니다! */</span>\n    .<span class=\"token property\">box</span><span class=\"token punctuation\">:</span><span class=\"token function\">nth-child</span><span class=\"token punctuation\">(</span><span class=\"token variable\">#{$i}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token comment\">/* 괄호 내부는 값을 적는 부분이 아니므로, # 을 통해 보간법을 사용한 것. */</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px <span class=\"token operator\">*</span> <span class=\"token variable\">$i</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* 연산자 뒤는 값을 적는 부분이 맞으므로 보간법을 사용하지 않아도 된다. */</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2-code-classlanguage-texteachcode\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-texteachcode\" aria-label=\"2 code classlanguage texteachcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <code class=\"language-text\">@each</code></h3>\n<p>SCSS는 JS의 배열과 유사한 <code class=\"language-text\">list</code>, 객체와 유사한 <code class=\"language-text\">map</code>이라는 데이터 종류를 지원한다. <code class=\"language-text\">list</code>의 경우 SCSS에서 취급할 수 있는 기본적인 데이터를 <strong>순서</strong>대로 명시한 데이터이며, <code class=\"language-text\">map</code>의 경우 key-value 형태로 데이터를 취급할 수 있으며 순서(인덱스)가 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$list</span></span><span class=\"token punctuation\">:</span> orange<span class=\"token punctuation\">,</span> royalblue<span class=\"token punctuation\">,</span> yellow<span class=\"token punctuation\">;</span>\n<span class=\"token property\"><span class=\"token variable\">$map</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token property\">o</span><span class=\"token punctuation\">:</span> orange<span class=\"token punctuation\">,</span>\n    <span class=\"token property\">r</span><span class=\"token punctuation\">:</span> royalblue<span class=\"token punctuation\">,</span>\n    <span class=\"token property\">y</span><span class=\"token punctuation\">:</span> yellow\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이러한 데이터들에 대해 <code class=\"language-text\">@each</code> 키워드를 사용하면, 그 요소들을 반복적으로 순회할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$list</span></span><span class=\"token punctuation\">:</span> orange<span class=\"token punctuation\">,</span> royalblue<span class=\"token punctuation\">,</span> yellow<span class=\"token punctuation\">;</span>\n<span class=\"token property\"><span class=\"token variable\">$map</span></span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token property\">o</span><span class=\"token punctuation\">:</span> orange<span class=\"token punctuation\">,</span>\n    <span class=\"token property\">r</span><span class=\"token punctuation\">:</span> royalblue<span class=\"token punctuation\">,</span>\n    <span class=\"token property\">y</span><span class=\"token punctuation\">:</span> yellow\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">@each</span> <span class=\"token selector\"><span class=\"token variable\">$k</span>, <span class=\"token variable\">$v</span> in <span class=\"token variable\">$map</span> </span><span class=\"token punctuation\">{</span>\n    <span class=\"token selector\">.box-<span class=\"token variable\">#{$k}</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$v</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* CSS 변환 */</span>\n<span class=\"token selector\">.box-o </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> orange<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.box-r </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> royalblue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.box-y </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<h2 id=\"-함수\" style=\"position:relative;\"><a href=\"#-%ED%95%A8%EC%88%98\" aria-label=\" 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛠 함수</h2>\n<h3 id=\"1-code-classlanguage-textfunctioncode\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textfunctioncode\" aria-label=\"1 code classlanguage textfunctioncode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">@function</code></h3>\n<p>여타 언어의 함수와 다를 것 없이, 파라미터를 받아 결과값을 연산해낸 후 이를 반환한다. 속성의 값으로 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token keyword\">@function</span> <span class=\"token function\">ratio</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$size</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ratio</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">@return</span> <span class=\"token variable\">$size</span> <span class=\"token operator\">*</span> <span class=\"token variable\">$ratio</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.box </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\"><span class=\"token variable\">$width</span></span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$width</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token function\">radio</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$width</span><span class=\"token punctuation\">,</span> 1/2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2-색상-관련-내장-함수-\" style=\"position:relative;\"><a href=\"#2-%EC%83%89%EC%83%81-%EA%B4%80%EB%A0%A8-%EB%82%B4%EC%9E%A5-%ED%95%A8%EC%88%98-\" aria-label=\"2 색상 관련 내장 함수  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 색상 관련 내장 함수 🎨</h3>\n<h4 id=\"1-code-classlanguage-textmixcode\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textmixcode\" aria-label=\"1 code classlanguage textmixcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) <code class=\"language-text\">mix</code></h4>\n<p>주어지는 두 인수의 색상을 섞어서 새로운 색상을 내어 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$color</span></span><span class=\"token punctuation\">:</span> royalblue<span class=\"token punctuation\">;</span>\n<span class=\"token selector\">.box </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">mix</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">,</span> red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">/* 보라색 계열의 색상이 적용될 것이다. */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"2-code-classlanguage-textlightencode-code-classlanguage-textdarkencode\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-textlightencode-code-classlanguage-textdarkencode\" aria-label=\"2 code classlanguage textlightencode code classlanguage textdarkencode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) <code class=\"language-text\">lighten</code>, <code class=\"language-text\">darken</code></h4>\n<p>원본 색상의 밝기를 밝거나 어둡게 조절할 때 사용할 수 있다. 주로 버튼에 커서를 올렸을 때와 같은 상황에서 유용하게 쓰일 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$color</span></span><span class=\"token punctuation\">:</span> royalblue<span class=\"token punctuation\">;</span>\n<span class=\"token selector\">.btn </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">lighten</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">,</span> 10%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">/* 원본 색상보다 10% 밝은 색상을 적용 */</span>\n    <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">darken</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">,</span> 10%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">/* 원본 색상보다 10% 어두운 색상을 적용 */</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"3-code-classlanguage-textsaturatecode-code-classlanguage-textdesaturatecode-code-classlanguage-textgrayscalecode\" style=\"position:relative;\"><a href=\"#3-code-classlanguage-textsaturatecode-code-classlanguage-textdesaturatecode-code-classlanguage-textgrayscalecode\" aria-label=\"3 code classlanguage textsaturatecode code classlanguage textdesaturatecode code classlanguage textgrayscalecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) <code class=\"language-text\">saturate</code>, <code class=\"language-text\">desaturate</code>, <code class=\"language-text\">grayscale</code></h4>\n<p>원본 색상의 채도를 올리거나 내릴 때 사용할 수 있다. <code class=\"language-text\">grayscale</code>의 경우에는 흑백으로 만들 하나의 색상 인자만 필요하며, %와 같은 수치는 필요하지 않다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$color</span></span><span class=\"token punctuation\">:</span> royalblue<span class=\"token punctuation\">;</span>\n<span class=\"token selector\">.btn </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">saturate</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">,</span> 40%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">/* 원본 색상보다 채도가 40% 올라간 색상을 적용 */</span>\n    <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">desaturate</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">,</span> 40%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">/* 원본 색상보다 채도가 40% 내려간 색상을 적용 */</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:focus </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">grayscale</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">/* 해당 색상이 흑백으로 보여짐 */</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"3-code-classlanguage-textinvertcode\" style=\"position:relative;\"><a href=\"#3-code-classlanguage-textinvertcode\" aria-label=\"3 code classlanguage textinvertcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) <code class=\"language-text\">invert</code></h4>\n<p>색상을 반전시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$color</span></span><span class=\"token punctuation\">:</span> royalblue<span class=\"token punctuation\">;</span>\n<span class=\"token selector\">.btn </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">invert</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* 파란색에서 반전되어 노란색 계열의 색이 적용된다. */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"4-code-classlanguage-textrgbacode\" style=\"position:relative;\"><a href=\"#4-code-classlanguage-textrgbacode\" aria-label=\"4 code classlanguage textrgbacode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4) <code class=\"language-text\">rgba</code></h4>\n<p>색상의 투명도를 조절할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$color</span></span><span class=\"token punctuation\">:</span> royalblue<span class=\"token punctuation\">;</span>\n<span class=\"token selector\">.btn </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">,</span> .5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* 해당 색상이 반투명하게 적용된다. */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>표준의 CSS에서도 rgba 함수를 사용할 수 있었는데, 이때 (0,0,0,.5)와 같은 식으로 4개의 인수를 사용하여 색상을 직접 명시해야 했다. 하지만 SCSS에서는 변수를 사용하여 오직 2개의 인수만으로 보다 편리하게 사용할 수 있다.</p>\n<br/>\n<h2 id=\"-재활용\" style=\"position:relative;\"><a href=\"#-%EC%9E%AC%ED%99%9C%EC%9A%A9\" aria-label=\" 재활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔄 재활용</h2>\n<h3 id=\"1-code-classlanguage-textmixincode\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textmixincode\" aria-label=\"1 code classlanguage textmixincode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">@mixin</code></h3>\n<p>우리가 알고 있는 <strong>CSS 코드의 모음</strong>이다. 즉 CSS 속성과 값을 쭉 나열한 후 하나의 코드블록으로 묶어 여러 곳에 손쉽게 적용하고 재활용하는 것. 디자인에서의 preset과 유사하다.</p>\n<p>한편, 위에서 본 <code class=\"language-text\">@function</code> 등의 함수는 실제로 어떤 값을 <strong>연산</strong>하여 <strong>반환된 결과</strong>를 사용하기 위해 만들어낸 개념이라고 생각할 수 있다.</p>\n<p>즉, @mixin은 일반적으로 <strong>CSS 스타일</strong>을 다루는 용도, @function은 일반적인 <strong>값</strong>을 어떻게 처리할지에 대한 내용을 다루는 용도로 사용한다.</p>\n<h3 id=\"2-code-classlanguage-textcontentcode\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-textcontentcode\" aria-label=\"2 code classlanguage textcontentcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <code class=\"language-text\">@content</code></h3>\n<p><code class=\"language-text\">@mixin</code> 내부에서 <code class=\"language-text\">@content</code>를 선언하면, 이후 해당 믹스인을 <code class=\"language-text\">@include</code>하여 사용할 때 중괄호를 열어 해당 믹스인 내부의 <code class=\"language-text\">@content</code> 위치에 추가로 속성을 더할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token keyword\">@mixin</span> <span class=\"token selector\">left-top </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">@content</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.box </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">@include</span> <span class=\"token selector\">left-top </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* 이상 세 가지의 속성이 추가로 믹스인의 @content 위치에 더해져 CSS로 변환된다 */</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"📌 , ,  등 코드의 재활용성을 높이는 키워드를 통해 vanilla CSS보다 훨씬 간결한 스타일 코드를 작성해 보자. 🔁 반복문 1.  반복문을 사용하면  등 연속되는 여러 요소에 동일한 속성을 빠르게 적용할 수 있다. , ,  등의 키워드와 함께 사용하며, 보간법을 사용할 수 있어 유용하다. 다만, 자바스크립트의 보간법은 이었다면 SCSS에서는 으로 사용해야 한다. SCSS에서 는 이미 변수를 만드는 용도로 사용되고 있기 때문이다. 2.  SCSS는 JS의 배열과 유사한 , 객체와 유사한 이라는 데이터 종류를 지원한다. 의 경우 SCSS에서 취급할 수 있는 기본적인 데이터를 순서대로 명시한 데이터이며, 의 경우 key-value 형태로 데이터를 취급할 수 있으며 순서(인덱스)가 없다. 이러한 데이터들에 대해  키워드를 사용하면, 그 요소들을 반복적으로 순회할 수 있다. 🛠 함수 1.  여타 언어의 함수와 다를 것 없이, 파라미터를 받아 결과값을 연산해낸 후 이를 반환한다. 속…","frontmatter":{"date":"January 04, 2022","title":"(SCSS) 반복문, 함수 그리고 재활용","categories":"frontend","author":"규자","emoji":"🌱"},"fields":{"slug":"/SCSS-grammar/"}},"next":{"id":"11e752b2-7b1b-507e-824e-be4cb794f666","html":"<h2 id=\"-typescript란\" style=\"position:relative;\"><a href=\"#-typescript%EB%9E%80\" aria-label=\" typescript란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 TypeScript란?</h2>\n<p>마이크로소프트에서 구현한 JavaScript의 슈퍼셋(Superset) 프로그래밍 언어. 확장자로는 .ts를 사용하며, 컴파일의 결과물로 JavaScript 코드를 출력한다. 최종적으로 런타임에서는 이렇게 출력된 JavaScript 코드를 구동시키게 된다.</p>\n<h3 id=\"️-그게-무슨-소린가요\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EA%B7%B8%EA%B2%8C-%EB%AC%B4%EC%8A%A8-%EC%86%8C%EB%A6%B0%EA%B0%80%EC%9A%94\" aria-label=\"️ 그게 무슨 소린가요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤦‍♀️ 그게 무슨 소린가요?</h3>\n<p>타입스크립트는 한마디로 자바스크립트를 기반으로 ‘타입’을 부여한 언어다.\n즉 자바스크립트의 확장판 개념의 언어로 먼저 자바스크립트에 대한 선수 지식이 필수적이다.</p>\n<p>타입스크립트는 <strong>“컴파일의 결과물로 JavaScript 코드를 출력한다.”</strong><br/>이는 브라우저에서 타입스크립트 파일을 실행하기 위해서는 plain JavaScript로 파일을 한 번 변환하는 과정이 필요하다는 뜻이며, 이것을 <code class=\"language-text\">컴파일</code>이라고 부른다.</p>\n<p>다만 전통적인 컴파일 언어들과 비교했을 때에는 비교적 다른 점이 많아, <code class=\"language-text\">transpile</code>이라는 용어를 사용하기도 한다. 한편, 자바스크립트는 컴파일 또는 트랜스파일 언어가 아닌 <strong>인터프리터 언어</strong>다.</p>\n<table>\n<thead>\n<tr>\n<th>Compiled</th>\n<th>Interpreted</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>컴파일이 필요함</td>\n<td>컴파일이 필요하지 않음</td>\n</tr>\n<tr>\n<td>컴파일러가 필요함</td>\n<td>컴파일러가 필요하지 않음</td>\n</tr>\n<tr>\n<td>컴파일하는 시점이 존재함<br/><strong>(컴파일 타임)</strong></td>\n<td>컴파일하는 시점이 존재하지 않음</td>\n</tr>\n<tr>\n<td>컴파일된 결과물을 실행함</td>\n<td>코드 자체를 실행함</td>\n</tr>\n<tr>\n<td>런타임이 없음</td>\n<td>코드를 한 줄씩 읽어 내려가며 실행됨</br>(런타임)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"-타입스크립트-컴파일러-설치\" style=\"position:relative;\"><a href=\"#-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC-%EC%84%A4%EC%B9%98\" aria-label=\" 타입스크립트 컴파일러 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛠 타입스크립트 컴파일러 설치</h2>\n<p>타입스크립트 컴파일러는 글로벌, 즉 전역 설치를 통해 작업중인 프로젝트와 관련 없이 어느 위치에서든 <code class=\"language-text\">tsc</code> 명령어를 통해 사용할 수 있다. </br>\n또는, 작업 중인 프로젝트 내부에 설치하여 <code class=\"language-text\">node_modules/.bin/tsc/</code> 디렉토리에서 확인할 수도 있다.</p>\n<br/>\n<h3 id=\"1-글로벌로-설치-\" style=\"position:relative;\"><a href=\"#1-%EA%B8%80%EB%A1%9C%EB%B2%8C%EB%A1%9C-%EC%84%A4%EC%B9%98-\" aria-label=\"1 글로벌로 설치  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 글로벌로 설치 🌏</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">npm install typescript <span class=\"token operator\">-</span>g</code></pre></div>\n<p><code class=\"language-text\">-g</code> 옵션을 제거하면 작업 중인 프로젝트 내부에 설치된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// tsc {.ts 확장자 파일명}</span>\ntsc test<span class=\"token punctuation\">.</span>ts</code></pre></div>\n<p>타입스크립트 컴파일러가 컴파일에 성공하면, 현재 위치에 ts 파일명과 동일한 이름이지만 .js 확장자인 파일이 생성된다.</p>\n<h4 id=\"-code-classlanguage-texttsc---initcode\" style=\"position:relative;\"><a href=\"#-code-classlanguage-texttsc---initcode\" aria-label=\" code classlanguage texttsc   initcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 <code class=\"language-text\">tsc --init</code></h4>\n<p>작업을 하다 보면 현 디렉토리 내에 있는 모든 .ts 파일들을 한꺼번에 컴파일해야 하는 상황이 생길 수 있다. 이 때에는 아래와 같이 명령어 <code class=\"language-text\">tsc</code>를 입력하는데, 아마 길다란 에러 메세지와 마주칠 것이다:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">tsc</code></pre></div>\n<p>프로젝트 안에 있는 ‘모든’ 파일을 컴파일하는 만큼, 어떤 식으로 컴파일할 것인지 사전에 작성된 설정 파일을 요구하는 것이다. 이 때는 설정 파일을 자동으로 생성해주는 명령어를 실행할 수 있다;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">tsc --init</code></pre></div>\n<p>그러면 <code class=\"language-text\">tsconfig.json</code>이라는 파일이 현재 위치에 생성될 것이다. 이 파일이 생성된 위치에서 다시 한 번 <code class=\"language-text\">tsc</code> 명령어를 실행하면, 해당 디렉토리 내부의 모든 .ts 파일이 컴파일된다.</p>\n<h4 id=\"-code-classlanguage-texttsc--wcode\" style=\"position:relative;\"><a href=\"#-code-classlanguage-texttsc--wcode\" aria-label=\" code classlanguage texttsc  wcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 <code class=\"language-text\">tsc -w</code></h4>\n<p>프로젝트에 착수하다 보면 타입스크립트 파일을 수시로 수정해야 할 것이다. 수정이 잦아질수록 매번 컴파일을 실행하기 아주 귀찮아질 수 있다. 그래서 타입스크립트는 <strong>watch 모드</strong> 옵션을 통해 .ts 파일의 수정사항을 감지하여 자동으로 즉시 컴파일하는 기능을 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">tsc -w</code></pre></div>\n<br/>\n<h3 id=\"2-프로젝트-내부로컬에-설치-\" style=\"position:relative;\"><a href=\"#2-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%82%B4%EB%B6%80%EB%A1%9C%EC%BB%AC%EC%97%90-%EC%84%A4%EC%B9%98-\" aria-label=\"2 프로젝트 내부로컬에 설치  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 프로젝트 내부(로컬)에 설치 🗂</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm init -y</code></pre></div>\n<p>먼저 현 디렉토리를 npm 프로젝트로 초기화하기 위해 <code class=\"language-text\">npm init</code> 명령어를 입력한다. 이 때 <code class=\"language-text\">-y</code> 옵션을 통해 모든 선택사항에 대해 default 값이 들어간 상태로 package.json 파일이 만들어진다. 특별하게 무언가 지정해주어야 하는 상황이 아니라면 많은 경우 이 옵션을 통해 간편하게 package.json 파일을 생성할 수 있다.</p>\n<p>결과적으로, 프로젝트의 루트 디렉토리에서 위의 명령어를 실행하면 package.json 파일이 생성될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install typescript</code></pre></div>\n<p>위의 전역 설치 명령어에서 <code class=\"language-text\">-g</code> 옵션을 제거했을 뿐이다. 이렇게 설치하면 앞서 말했듯 <code class=\"language-text\">package.json</code> 파일의 <code class=\"language-text\">dependencies</code>에 “typescript” 가 추가된 것을 확인할 수 있다. 또한 node_modules 폴더에 들어가도 typescript 폴더를 확인할 수 있다.</p>\n<p>다만, 우리가 터미널에서 사용하는 명령어는 typescript가 아닌 <code class=\"language-text\">tsc</code>인데, 이것은 node_modules의 <code class=\"language-text\">.bin</code> 폴더나 <code class=\"language-text\">node_modules/typescript/bin</code> 디렉토리에서 찾아볼 수 있다:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node_modules/.bin/tsc\nnode_modules/typescript/bin/tsc</code></pre></div>\n<p>위 두 명령어 중 아무거나 실행하면 tsc가 실행되는데, 둘 다 길고 귀찮다.</p>\n<p>그래서 npm의 버전이 올라감에 따라 npx라는 명렁어가 추가되었다:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npx tsc --init</code></pre></div>\n<p>그래서 긴 디렉토리명을 명시하는 대신 <code class=\"language-text\">npx</code> 명령어를 앞에 붙여 간단하게 <code class=\"language-text\">tsc</code>를 실행할 수 있다. 위 명령어를 실행하면 전역 설치한 경우와 같이 tsconfig.json 파일이 생성될 것이다.</p>\n<h4 id=\"-cli-명령어로-실행\" style=\"position:relative;\"><a href=\"#-cli-%EB%AA%85%EB%A0%B9%EC%96%B4%EB%A1%9C-%EC%8B%A4%ED%96%89\" aria-label=\" cli 명령어로 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 cli 명령어로 실행</h4>\n<p>프로젝트 내부에 생성된 package.json 파일의 “scripts” 부분에 명령어를 추가하여 <code class=\"language-text\">npm run {명령어}</code> 로 보다 직관적으로 사용할 수도 있다:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">/* package.json */</span>\n<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"build\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 때 tsc의 경로는 사실 <code class=\"language-text\">node_modules/.bin</code> 디렉토리 내부이지만 package.json의 scripts 부분에 작성할 때는 이를 생략하고 tsc만 명시할 수 있다.</p>","frontmatter":{"date":"December 31, 2021","title":"(TypeScript) 개념과 초기 실행","categories":"TypeScript frontend","author":"규자","emoji":"🌱"},"fields":{"slug":"/typescript-concept/"}},"prev":{"id":"a2fcb012-9e17-5b8e-a2d1-bc3121be7652","html":"<h2 id=\"-타입-캐스팅-형-변환\" style=\"position:relative;\"><a href=\"#-%ED%83%80%EC%9E%85-%EC%BA%90%EC%8A%A4%ED%8C%85-%ED%98%95-%EB%B3%80%ED%99%98\" aria-label=\" 타입 캐스팅 형 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔄 타입 캐스팅 (형 변환)</h2>\n<p>가끔씩 프로그래밍을 하다 보면 형이 다른 변수 끼리 대입을 하는 연산을 필요로 한다. 예를 들어서 <code class=\"language-text\">double</code> 형 변수의 값을 <code class=\"language-text\">int</code> 형 변수에 대입하거나, <code class=\"language-text\">float</code> 형 변수에 <code class=\"language-text\">double</code> 형 변수의 값을 대입하는 경우다. 하지만 형이 다른 변수 끼리의 대입이나 연산은 컴파일이 불가능하거나, warning을 띄우게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">;</span>\n\n  b <span class=\"token operator\">=</span> <span class=\"token number\">2.4</span><span class=\"token punctuation\">;</span>\n  a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">int</code> 형 변수에 <code class=\"language-text\">double</code> 형 변수를 대입하면 소수 부분이 잘려서 정수 부분만 들어간다. 컴파일러는 이에 따른 데이터 손실에 대한 warning을 띄운다 (error가 아니기에 컴파일은 된다). 여기서는 컴파일러가 암묵적으로 형 변환을 해주었지만, 다른 사람에게 이 코드를 보여준다고 생각하면 명시적으로 형 변환을 밝혀 주는 것이 좋겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">;</span>\n\n  b <span class=\"token operator\">=</span> <span class=\"token number\">2.4</span><span class=\"token punctuation\">;</span>\n  a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">a</code>의 자료형은 <code class=\"language-text\">int</code>로 선언되어 있으므로 <code class=\"language-text\">b</code>의 앞에 <code class=\"language-text\">(int)</code>를 붙여 형 변환 시킨 값을 <code class=\"language-text\">a</code>에 넣어주겠다는 뜻이다. 형 변환 자체가 어려운 개념은 아니지만, 어쨌든 내가 선언한 변수가 컴파일 과정에서 다른 타입으로 변환되어 계산될 수 있다는 사실을 인지하는 것은 중요하다. 이후 포인터를 본격적으로 이야기하게 되면 ‘배열’과 ‘배열 이름’은 완전히 다르다는 사실을 계속 이야기할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 배열 <code class=\"language-text\">arr</code>의 타입은 <code class=\"language-text\">int[10]</code>이고, <code class=\"language-text\">sizeof</code>나 <code class=\"language-text\">&amp;</code>연산자를 사용한 연산을 제외하고는 변수명 <code class=\"language-text\">arr</code>를 사용할 때 <code class=\"language-text\">int *</code> 타입으로 형변환된다. 그래서 컴파일러 상에서는 포인터 연산으로 해석된다. 당최 무슨 소리인지! 차차 이해하게 될 것이다.</p>\n<br/>\n<h2 id=\"-포인터\" style=\"position:relative;\"><a href=\"#-%ED%8F%AC%EC%9D%B8%ED%84%B0\" aria-label=\" 포인터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🏹 포인터</h2>\n<p>공부하면 공부할수록, 생각하면 생각할수록 복잡하고 알쏭달쏭한 포인터 이야기에 접어들었다. 사실 그냥 그렇구나~ 하고 받아들이면 포인터를 공부하며 크게 헤멜 일은 없을지도 모른다. 하지만 나처럼 <em>어째서? 정확한 원리가 뭐지? 저렇게 연산되는 이유는 뭐지?</em> 와 같은 의문을 끊임없이 던진다면 포인터에 대해 최소 하루이틀은 온종일 붙잡고 있어야 할 수도 있다. 지금부터 이어지는 글은 온갖 포인터 관련 강의들, 정리들과 스택오버플로우를 떠돌며 나에게 필요한 포인터 관련 개념을 총정리한 내용이니, 개인적으로 일독을 정말 추천한다. 나름 자신있다!</p>\n<h3 id=\"1-포인터를-공부하기-전에\" style=\"position:relative;\"><a href=\"#1-%ED%8F%AC%EC%9D%B8%ED%84%B0%EB%A5%BC-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-%EC%A0%84%EC%97%90\" aria-label=\"1 포인터를 공부하기 전에 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 포인터를 공부하기 전에</h3>\n<p>몇 가지만 알아두자.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr 배열의 2 행 3 열의 수를 출력 : %d \\n\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/*  arr 배열의 2 행 3 열의 수를 출력 : 6 */</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>2 차원 배열이나 1 차원 배열 모두 메모리 상에서 연속적으로 쭈르륵 존재한다.</li>\n<li>메모리의 한 ‘방’의 크기는 보통 1바이트로 정의된다.</li>\n<li>컴퓨터는 이 각각의 ‘방’들을 구분하기 위해 고유의 주소를 붙인다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>위 코드는, 컴파일러를 거쳐 “메모리의 특정 방에서부터 4 바이트(방 4개)의 공간에 있는 데이터를 10 으로 바꾸어라!” 라는 명령으로 변환된다.</li>\n</ul>\n<br/>\n<h3 id=\"2-포인터도-변수다\" style=\"position:relative;\"><a href=\"#2-%ED%8F%AC%EC%9D%B8%ED%84%B0%EB%8F%84-%EB%B3%80%EC%88%98%EB%8B%A4\" aria-label=\"2 포인터도 변수다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 포인터도 변수다!</h3>\n<p>포인터는 우리가 앞에서 보았던 <code class=\"language-text\">int</code> 나 <code class=\"language-text\">char</code> 변수들과 다른 것이 전혀 아니다. 포인터도 ‘변수’이다. <code class=\"language-text\">int</code> 형 변수가 정수 데이터, <code class=\"language-text\">float</code> 형 변수가 실수 데이터를 보관했던 것 처럼, 포인터도 특정한 데이터를 보관하는 ‘변수’이다.</p>\n<p><strong>바로, 특정한 데이터가 저장된 <u>주소값</u>을 보관하는 변수이다!</strong></p>\n<blockquote>\n<p>✅ 포인터 : 메모리 상에 위치한 특정한 데이터의 (시작)주소값을 보관하는 변수!</p>\n</blockquote>\n<ul>\n<li><code class=\"language-text\">(포인터에 주소값이 저장되는 데이터의 형) *(포인터의 이름);</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* int 타입 데이터를 가리키는 포인터 변수 */</span></code></pre></div>\n<p>즉, 부연하자면 포인터 역시 형(type)을 가지며, 초기화 시 어떤 타입의 데이터를 가리킬 것인지 명시해주어야 한다.</p>\n<br/>\n<h3 id=\"3-code-classlanguage-textampcode-연산자\" style=\"position:relative;\"><a href=\"#3-code-classlanguage-textampcode-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"3 code classlanguage textampcode 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. <code class=\"language-text\">&amp;</code> 연산자</h3>\n<p>이 <strong>단항</strong> 연산자 <code class=\"language-text\">&amp;</code>는 비트 연산자 AND와 같은 기호를 사용하지만 다르게 해석된다.</p>\n<p>어떤 데이터(변수)의 앞에 사용하여 다음과 같이 사용한다:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* &amp; 연산자 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p \\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* 포인터의 시작 */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n\n  p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"포인터 p 에 들어 있는 값 : %p \\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"int 변수 a 가 저장된 주소 : %p \\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* 포인터의 값과 변수의 주소가 모두 동일한 값으로 출력될 것이다 */</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>코드 출처: 모두의 코드 씹어먹는 C 언어(<a href=\"https://modoocode.com/23\">https://modoocode.com/23</a>)</li>\n</ul>\n<br/>\n<h3 id=\"4-code-classlanguage-textcode-연산자\" style=\"position:relative;\"><a href=\"#4-code-classlanguage-textcode-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"4 code classlanguage textcode 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. <code class=\"language-text\">*</code> 연산자</h3>\n<p>이렇게 <code class=\"language-text\">&amp;</code> 연산자를 사용하여 변수(데이터)가 저장되어 있는 <strong>메모리 주소</strong>를 꺼내올 수 있다면, 반대로 해당 주소의 메모리에 저장되어 있는 <strong>실제 값</strong>을 꺼내서 사용할 수도 있어야 하는 것이 당연하다.</p>\n<p><strong>“나(포인터)를 <u>나에게 저장된 주소값에 위치한 데이터</u>로 생각해줘!”</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n\n    p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a의 값: %d\"</span><span class=\"token punctuation\">.</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*p의 값: %d\"</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드를 보면, 포인터 변수 p가 변수 a의 <strong>메모리 주소</strong>를 담고 있다가, 앞에 <code class=\"language-text\">*</code>연산자를 붙임으로써 본인이 가리키고 있던 그 메모리 주소에 저장되어 있던 <strong>실제 값</strong>을 가져온 것이다.</p>\n<p><strong>즉, 변수 <code class=\"language-text\">a</code>와 <code class=\"language-text\">*p</code>는 정확히 동일하다.</strong></p>\n<p>반대로 생각하면, 포인터를 통해 특정 메모리 주소에 저장되어 있는 값을 그대로 가져올 뿐만 아니라, 해당 값에 접근해 <strong>직접 수정할 수도 있다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n\n    p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a의 값: %d\"</span><span class=\"token punctuation\">.</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*p의 값: %d\"</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<h3 id=\"-포인터를-왜-쓰는건데\" style=\"position:relative;\"><a href=\"#-%ED%8F%AC%EC%9D%B8%ED%84%B0%EB%A5%BC-%EC%99%9C-%EC%93%B0%EB%8A%94%EA%B1%B4%EB%8D%B0\" aria-label=\" 포인터를 왜 쓰는건데 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 포인터를 왜 쓰는건데</h3>\n<p>이렇듯 포인터는 <code class=\"language-text\">&amp;</code>연산자를 사용하여 어떤 값이 저장된 ‘메모리’ 주소로 접근할 수 있고, <code class=\"language-text\">*</code>연산자를 사용하여 그 값을 꺼내어 사용할 수도 있는 변수라는 아주 기본적인 개념을 알아보았다. C에서는 이 포인터가 대체 왜 이렇게 중요하게 다뤄질까? 그 이유는 C언어가 컴퓨터를 효율적으로 사용할 수 있도록 설계된 프로그래밍 언어이기 때문이다. 다른 예시로 <code class=\"language-text\">JavaScript</code>는 브라우저를 제어하기 위해 탄생한 언어다. 같은 맥락에서 C언어는 하드웨어를 제어하고 메모리를 조작하는 등 제한을 두지 않고 프로그래머에게 강력한 제어구조를 제공한다.</p>\n<p>포인터를 사용하면 메모리 주소를 참조하여 배열과 같은 연속된 데이터에 접근과 조작이 용이하다. 원소의 크기를 알면 메모리 주소를 통해 포인터 연산만으로 간편하게 접근할 수 있다. 이는 나아아아아중에 이야기할 ‘동적 할당된 메모리 영역(힙 영역)에 대한 접근 및 조작’에서 아주 중요한 역할을 한다. 또한 메모리에 직접 접근하므로 메모리 공간을 효율적으로 사용할 수 있다. <code class=\"language-text\">JavaScript</code>의 경우, 변수 값이 바뀌면 기존 값이 저장되어 있던 메모리 공간은 바로 비워지지 않고 컴파일러가 임의로 나중에 삭제한다. 값이 수시로 바뀌어야 하는 경우 컴파일러에 의한 임의의 딜레이가 쌓이면 비효율을 초래할 수 있을 것이다. 하지만 C는 포인터를 통해 메모리에 직접 접근할 수 있으므로 메모리 공간을 내가 필요한 만큼만 사용하거나 확보할 수 있다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%ED%83%80%EC%9E%85-%EC%BA%90%EC%8A%A4%ED%8C%85-%ED%98%95-%EB%B3%80%ED%99%98\">🔄 타입 캐스팅 (형 변환)</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%8F%AC%EC%9D%B8%ED%84%B0\">🏹 포인터</a></p>\n<ul>\n<li><a href=\"#1-%ED%8F%AC%EC%9D%B8%ED%84%B0%EB%A5%BC-%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-%EC%A0%84%EC%97%90\">1. 포인터를 공부하기 전에</a></li>\n<li><a href=\"#2-%ED%8F%AC%EC%9D%B8%ED%84%B0%EB%8F%84-%EB%B3%80%EC%88%98%EB%8B%A4\">2. 포인터도 변수다!</a></li>\n<li><a href=\"#3--%EC%97%B0%EC%82%B0%EC%9E%90\">3. <code class=\"language-text\">&amp;</code> 연산자</a></li>\n<li><a href=\"#4--%EC%97%B0%EC%82%B0%EC%9E%90\">4. <code class=\"language-text\">*</code> 연산자</a></li>\n<li><a href=\"#-%ED%8F%AC%EC%9D%B8%ED%84%B0%EB%A5%BC-%EC%99%9C-%EC%93%B0%EB%8A%94%EA%B1%B4%EB%8D%B0\">🤔 포인터를 왜 쓰는건데</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"April 04, 2022","title":"(C) 포인터 벼락치기 1. 형 변환과 포인터","categories":"C 42Seoul","author":"규자","emoji":"🌱"},"fields":{"slug":"/c-pointer-cram-1/"}},"site":{"siteMetadata":{"siteUrl":"https://gyutato.github.io","comments":{"utterances":{"repo":"gyutato/gyutato.github.io"}}}}},"pageContext":{"slug":"/SCSS-grammar/","nextSlug":"/typescript-concept/","prevSlug":"/c-pointer-cram-1/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}